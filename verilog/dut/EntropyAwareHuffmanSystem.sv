// Generated by CIRCT firtool-1.62.0
module SymbolStat(
  input          clock,
                 reset,
                 io_data_in_valid,
  input  [255:0] io_data_in_bits,
  output [31:0]  io_freq_out_bits_0,
                 io_freq_out_bits_1,
                 io_freq_out_bits_2,
                 io_freq_out_bits_3,
                 io_freq_out_bits_4,
                 io_freq_out_bits_5,
                 io_freq_out_bits_6,
                 io_freq_out_bits_7,
  input          io_start,
                 io_flush
);

  reg [31:0] freq_0;
  reg [31:0] freq_1;
  reg [31:0] freq_2;
  reg [31:0] freq_3;
  reg [31:0] freq_4;
  reg [31:0] freq_5;
  reg [31:0] freq_6;
  reg [31:0] freq_7;
  reg [1:0]  state;
  always @(posedge clock) begin
    if (reset) begin
      freq_0 <= 32'h0;
      freq_1 <= 32'h0;
      freq_2 <= 32'h0;
      freq_3 <= 32'h0;
      freq_4 <= 32'h0;
      freq_5 <= 32'h0;
      freq_6 <= 32'h0;
      freq_7 <= 32'h0;
      state <= 2'h0;
    end
    else if (io_flush) begin
      freq_0 <= 32'h0;
      freq_1 <= 32'h0;
      freq_2 <= 32'h0;
      freq_3 <= 32'h0;
      freq_4 <= 32'h0;
      freq_5 <= 32'h0;
      freq_6 <= 32'h0;
      freq_7 <= 32'h0;
      state <= 2'h0;
    end
    else if (state == 2'h0) begin
      if (io_start) begin
        freq_0 <= 32'h0;
        freq_1 <= 32'h0;
        freq_2 <= 32'h0;
        freq_3 <= 32'h0;
        freq_4 <= 32'h0;
        freq_5 <= 32'h0;
        freq_6 <= 32'h0;
        freq_7 <= 32'h0;
        state <= 2'h1;
      end
    end
    else begin
      automatic logic             _GEN = state == 2'h1;
      automatic logic             _GEN_0 = state == 2'h1 & io_data_in_valid;
      automatic logic [7:0][31:0] _GEN_1 =
        {{freq_7}, {freq_6}, {freq_5}, {freq_4}, {freq_3}, {freq_2}, {freq_1}, {freq_0}};
      automatic logic [31:0]      _freq_T_1;
      _freq_T_1 = _GEN_1[io_data_in_bits[2:0]] + 32'h1;
      if (_GEN & _GEN_0 & io_data_in_bits[2:0] == 3'h0)
        freq_0 <= _freq_T_1;
      if (_GEN & _GEN_0 & io_data_in_bits[2:0] == 3'h1)
        freq_1 <= _freq_T_1;
      if (_GEN & _GEN_0 & io_data_in_bits[2:0] == 3'h2)
        freq_2 <= _freq_T_1;
      if (_GEN & _GEN_0 & io_data_in_bits[2:0] == 3'h3)
        freq_3 <= _freq_T_1;
      if (_GEN & _GEN_0 & io_data_in_bits[2:0] == 3'h4)
        freq_4 <= _freq_T_1;
      if (_GEN & _GEN_0 & io_data_in_bits[2:0] == 3'h5)
        freq_5 <= _freq_T_1;
      if (_GEN & _GEN_0 & io_data_in_bits[2:0] == 3'h6)
        freq_6 <= _freq_T_1;
      if (_GEN & _GEN_0 & (&(io_data_in_bits[2:0])))
        freq_7 <= _freq_T_1;
      if (~_GEN | io_start | io_data_in_valid) begin
      end
      else
        state <= 2'h2;
    end
  end // always @(posedge)
  assign io_freq_out_bits_0 = freq_0;
  assign io_freq_out_bits_1 = freq_1;
  assign io_freq_out_bits_2 = freq_2;
  assign io_freq_out_bits_3 = freq_3;
  assign io_freq_out_bits_4 = freq_4;
  assign io_freq_out_bits_5 = freq_5;
  assign io_freq_out_bits_6 = freq_6;
  assign io_freq_out_bits_7 = freq_7;
endmodule

module SymbolSort(
  input         clock,
                reset,
  input  [31:0] io_freq_in_bits_0,
                io_freq_in_bits_1,
                io_freq_in_bits_2,
                io_freq_in_bits_3,
                io_freq_in_bits_4,
                io_freq_in_bits_5,
                io_freq_in_bits_6,
                io_freq_in_bits_7,
  output [31:0] io_sorted_out_0,
                io_sorted_out_1,
                io_sorted_out_2,
                io_sorted_out_3,
                io_sorted_out_4,
                io_sorted_out_5,
                io_sorted_out_6,
                io_sorted_out_7,
  output        io_done,
  input         io_flush
);

  reg [1:0]  state;
  reg [31:0] work_array_0;
  reg [31:0] work_array_1;
  reg [31:0] work_array_2;
  reg [31:0] work_array_3;
  reg [31:0] work_array_4;
  reg [31:0] work_array_5;
  reg [31:0] work_array_6;
  reg [31:0] work_array_7;
  reg [3:0]  sort_counter;
  reg        phase;
  always @(posedge clock) begin
    automatic logic _GEN;
    automatic logic _GEN_0;
    _GEN = state == 2'h0;
    _GEN_0 = state == 2'h1;
    if (reset) begin
      state <= 2'h0;
      sort_counter <= 4'h0;
      phase <= 1'h0;
    end
    else begin
      if (io_flush) begin
        state <= 2'h0;
        sort_counter <= 4'h0;
      end
      else begin
        automatic logic [3:0][1:0] _GEN_1 =
          {{state}, {2'h0}, {phase & sort_counter[3] ? 2'h2 : state}, {state}};
        state <= _GEN_1[state];
        if (_GEN | ~(_GEN_0 & phase)) begin
        end
        else
          sort_counter <= sort_counter + 4'h1;
      end
      phase <= ~io_flush & (~_GEN & _GEN_0 ^ phase);
    end
    if (_GEN | ~_GEN_0) begin
    end
    else begin
      automatic logic [2:0]       _idx2_T;
      automatic logic [7:0][31:0] _GEN_2 =
        {{work_array_7},
         {work_array_6},
         {work_array_5},
         {work_array_4},
         {work_array_3},
         {work_array_2},
         {work_array_1},
         {work_array_0}};
      automatic logic [31:0]      _GEN_3;
      automatic logic             _GEN_4;
      automatic logic             _GEN_5;
      automatic logic             _GEN_6;
      automatic logic [2:0]       _idx2_T_1;
      automatic logic [31:0]      _GEN_7;
      automatic logic             _GEN_8;
      automatic logic             _GEN_9;
      automatic logic             _GEN_10;
      automatic logic [2:0]       _idx2_T_2;
      automatic logic [31:0]      _GEN_11;
      automatic logic             _GEN_12;
      automatic logic             _GEN_13;
      automatic logic             _GEN_14;
      automatic logic [2:0]       _idx2_T_3;
      automatic logic [31:0]      _GEN_15;
      automatic logic             _GEN_16;
      _idx2_T = {2'h0, ~phase} + 3'h1;
      _GEN_3 = _GEN_2[{2'h0, ~phase}];
      _GEN_4 = _GEN_3 < _GEN_2[_idx2_T];
      _GEN_5 = _GEN_4 & _idx2_T == 3'h6;
      _GEN_6 = _GEN_4 & (&_idx2_T);
      _idx2_T_1 = {2'h1, ~phase} + 3'h1;
      _GEN_7 = _GEN_2[{2'h1, ~phase}];
      _GEN_8 = _GEN_7 < _GEN_2[_idx2_T_1];
      _GEN_9 = _GEN_8 & _idx2_T_1 == 3'h6;
      _GEN_10 = _GEN_8 & (&_idx2_T_1);
      _idx2_T_2 = {2'h2, ~phase} + 3'h1;
      _GEN_11 = _GEN_2[{2'h2, ~phase}];
      _GEN_12 = _GEN_11 < _GEN_2[_idx2_T_2];
      _GEN_13 = _GEN_12 & _idx2_T_2 == 3'h6;
      _GEN_14 = _GEN_12 & (&_idx2_T_2);
      _idx2_T_3 = {2'h3, ~phase} + 3'h1;
      _GEN_15 = _GEN_2[{2'h3, ~phase}];
      _GEN_16 = _GEN_15 < _GEN_2[_idx2_T_3];
      if (_GEN_16 & _idx2_T_3 == 3'h0)
        work_array_0 <= _GEN_15;
      else if (_GEN_12 & _idx2_T_2 == 3'h0)
        work_array_0 <= _GEN_11;
      else if (_GEN_8 & _idx2_T_1 == 3'h0)
        work_array_0 <= _GEN_7;
      else if (_GEN_4) begin
        if (_idx2_T == 3'h0)
          work_array_0 <= _GEN_3;
        else if (phase)
          work_array_0 <= _GEN_2[_idx2_T];
      end
      if (_GEN_16 & _idx2_T_3 == 3'h1)
        work_array_1 <= _GEN_15;
      else if (_GEN_12 & _idx2_T_2 == 3'h1)
        work_array_1 <= _GEN_11;
      else if (_GEN_8 & _idx2_T_1 == 3'h1)
        work_array_1 <= _GEN_7;
      else if (_GEN_4) begin
        if (_idx2_T == 3'h1)
          work_array_1 <= _GEN_3;
        else if (phase) begin
        end
        else
          work_array_1 <= _GEN_2[_idx2_T];
      end
      if (_GEN_16 & _idx2_T_3 == 3'h2)
        work_array_2 <= _GEN_15;
      else if (_GEN_12 & _idx2_T_2 == 3'h2)
        work_array_2 <= _GEN_11;
      else begin
        automatic logic _GEN_17;
        _GEN_17 = _GEN_4 & _idx2_T == 3'h2;
        if (_GEN_8) begin
          if (_idx2_T_1 == 3'h2)
            work_array_2 <= _GEN_7;
          else if (phase)
            work_array_2 <= _GEN_2[_idx2_T_1];
          else if (_GEN_17)
            work_array_2 <= _GEN_3;
        end
        else if (_GEN_17)
          work_array_2 <= _GEN_3;
      end
      if (_GEN_16 & _idx2_T_3 == 3'h3)
        work_array_3 <= _GEN_15;
      else if (_GEN_12 & _idx2_T_2 == 3'h3)
        work_array_3 <= _GEN_11;
      else begin
        automatic logic _GEN_18;
        _GEN_18 = _GEN_4 & _idx2_T == 3'h3;
        if (_GEN_8) begin
          if (_idx2_T_1 == 3'h3)
            work_array_3 <= _GEN_7;
          else if (phase) begin
            if (_GEN_18)
              work_array_3 <= _GEN_3;
          end
          else
            work_array_3 <= _GEN_2[_idx2_T_1];
        end
        else if (_GEN_18)
          work_array_3 <= _GEN_3;
      end
      if (_GEN_16 & _idx2_T_3 == 3'h4)
        work_array_4 <= _GEN_15;
      else begin
        automatic logic _GEN_19;
        automatic logic _GEN_20;
        _GEN_19 = _GEN_4 & _idx2_T == 3'h4;
        _GEN_20 = _GEN_8 & _idx2_T_1 == 3'h4;
        if (_GEN_12) begin
          if (_idx2_T_2 == 3'h4)
            work_array_4 <= _GEN_11;
          else if (phase)
            work_array_4 <= _GEN_2[_idx2_T_2];
          else if (_GEN_20)
            work_array_4 <= _GEN_7;
          else if (_GEN_19)
            work_array_4 <= _GEN_3;
        end
        else if (_GEN_20)
          work_array_4 <= _GEN_7;
        else if (_GEN_19)
          work_array_4 <= _GEN_3;
      end
      if (_GEN_16 & _idx2_T_3 == 3'h5)
        work_array_5 <= _GEN_15;
      else begin
        automatic logic _GEN_21;
        automatic logic _GEN_22;
        _GEN_21 = _GEN_4 & _idx2_T == 3'h5;
        _GEN_22 = _GEN_8 & _idx2_T_1 == 3'h5;
        if (_GEN_12) begin
          if (_idx2_T_2 == 3'h5)
            work_array_5 <= _GEN_11;
          else if (phase) begin
            if (_GEN_22)
              work_array_5 <= _GEN_7;
            else if (_GEN_21)
              work_array_5 <= _GEN_3;
          end
          else
            work_array_5 <= _GEN_2[_idx2_T_2];
        end
        else if (_GEN_22)
          work_array_5 <= _GEN_7;
        else if (_GEN_21)
          work_array_5 <= _GEN_3;
      end
      if (_GEN_16) begin
        if (_idx2_T_3 == 3'h6)
          work_array_6 <= _GEN_15;
        else if (phase)
          work_array_6 <= _GEN_2[_idx2_T_3];
        else if (_GEN_13)
          work_array_6 <= _GEN_11;
        else if (_GEN_9)
          work_array_6 <= _GEN_7;
        else if (_GEN_5)
          work_array_6 <= _GEN_3;
        if (&_idx2_T_3)
          work_array_7 <= _GEN_15;
        else if (phase) begin
          if (_GEN_14)
            work_array_7 <= _GEN_11;
          else if (_GEN_10)
            work_array_7 <= _GEN_7;
          else if (_GEN_6)
            work_array_7 <= _GEN_3;
        end
        else
          work_array_7 <= _GEN_2[_idx2_T_3];
      end
      else begin
        if (_GEN_13)
          work_array_6 <= _GEN_11;
        else if (_GEN_9)
          work_array_6 <= _GEN_7;
        else if (_GEN_5)
          work_array_6 <= _GEN_3;
        if (_GEN_14)
          work_array_7 <= _GEN_11;
        else if (_GEN_10)
          work_array_7 <= _GEN_7;
        else if (_GEN_6)
          work_array_7 <= _GEN_3;
      end
    end
  end // always @(posedge)
  assign io_sorted_out_0 = work_array_0;
  assign io_sorted_out_1 = work_array_1;
  assign io_sorted_out_2 = work_array_2;
  assign io_sorted_out_3 = work_array_3;
  assign io_sorted_out_4 = work_array_4;
  assign io_sorted_out_5 = work_array_5;
  assign io_sorted_out_6 = work_array_6;
  assign io_sorted_out_7 = work_array_7;
  assign io_done = state == 2'h2;
endmodule

module AdaptiveThreshold(
  input         clock,
                reset,
  input  [47:0] io_entropy_in,
  input         io_entropy_valid,
  output        io_encoding_mode
);

  reg [1:0]  encoding_mode_reg;
  reg [47:0] entropy_reg;
  reg        valid_reg;
  always @(posedge clock) begin
    if (reset)
      encoding_mode_reg <= 2'h0;
    else if (valid_reg)
      encoding_mode_reg <=
        entropy_reg < 48'h8000 ? 2'h1 : {1'h0, entropy_reg < 48'h60001};
    entropy_reg <= io_entropy_in;
    valid_reg <= io_entropy_valid;
  end // always @(posedge)
  assign io_encoding_mode = encoding_mode_reg[0];
endmodule

module ShannonEntropy(
  input         clock,
                reset,
  input  [31:0] io_freq_in_0,
                io_freq_in_1,
                io_freq_in_2,
                io_freq_in_3,
                io_freq_in_4,
                io_freq_in_5,
                io_freq_in_6,
                io_freq_in_7,
  output        io_compression_mode,
                io_done,
  input         io_flush
);

  reg  [1:0]  state;
  reg  [2:0]  calc_index;
  reg  [31:0] entropy_acc;
  reg  [31:0] finalEntropy;
  reg  [31:0] total_symbols;
  wire        _GEN = state == 2'h0;
  wire        _GEN_0 = state == 2'h1;
  wire        _GEN_1 = state == 2'h2;
  wire        _GEN_2 = _GEN | _GEN_0;
  always @(posedge clock) begin
    if (reset) begin
      state <= 2'h0;
      calc_index <= 3'h0;
      entropy_acc <= 32'h0;
      finalEntropy <= 32'h0;
      total_symbols <= 32'h0;
    end
    else begin
      if (io_flush | ~(_GEN | _GEN_0 | ~_GEN_1))
        state <= 2'h0;
      if (io_flush) begin
        calc_index <= 3'h0;
        entropy_acc <= 32'h0;
        total_symbols <= 32'h0;
      end
      else begin
        automatic logic [7:0][31:0] _GEN_3 =
          {{io_freq_in_7},
           {io_freq_in_6},
           {io_freq_in_5},
           {io_freq_in_4},
           {io_freq_in_3},
           {io_freq_in_2},
           {io_freq_in_1},
           {io_freq_in_0}};
        automatic logic [31:0]      _GEN_4;
        _GEN_4 = _GEN_3[calc_index];
        if (_GEN | ~_GEN_0) begin
        end
        else
          calc_index <= calc_index + 3'h1;
        if (_GEN | ~(_GEN_0 & (|_GEN_4) & (|total_symbols))) begin
        end
        else begin
          automatic logic [47:0] prob;
          automatic logic [4:0]  k;
          automatic logic [52:0] _x_times_k_T;
          automatic logic [47:0] _entropy_term_T;
          prob = {_GEN_4, 16'h0} / {16'h0, total_symbols};
          k =
            prob[31]
              ? 5'h0
              : prob[30]
                  ? 5'h1
                  : prob[29]
                      ? 5'h2
                      : prob[28]
                          ? 5'h3
                          : prob[27]
                              ? 5'h4
                              : prob[26]
                                  ? 5'h5
                                  : prob[25]
                                      ? 5'h6
                                      : prob[24]
                                          ? 5'h7
                                          : prob[23]
                                              ? 5'h8
                                              : prob[22]
                                                  ? 5'h9
                                                  : prob[21]
                                                      ? 5'hA
                                                      : prob[20]
                                                          ? 5'hB
                                                          : prob[19]
                                                              ? 5'hC
                                                              : prob[18]
                                                                  ? 5'hD
                                                                  : prob[17]
                                                                      ? 5'hE
                                                                      : prob[16]
                                                                          ? 5'hF
                                                                          : prob[15]
                                                                              ? 5'h10
                                                                              : prob[14]
                                                                                  ? 5'h11
                                                                                  : prob[13]
                                                                                      ? 5'h12
                                                                                      : prob[12]
                                                                                          ? 5'h13
                                                                                          : prob[11]
                                                                                              ? 5'h14
                                                                                              : prob[10]
                                                                                                  ? 5'h15
                                                                                                  : prob[9]
                                                                                                      ? 5'h16
                                                                                                      : prob[8]
                                                                                                          ? 5'h17
                                                                                                          : prob[7]
                                                                                                              ? 5'h18
                                                                                                              : prob[6]
                                                                                                                  ? 5'h19
                                                                                                                  : prob[5]
                                                                                                                      ? 5'h1A
                                                                                                                      : prob[4]
                                                                                                                          ? 5'h1B
                                                                                                                          : prob[3]
                                                                                                                              ? 5'h1C
                                                                                                                              : prob[2]
                                                                                                                                  ? 5'h1D
                                                                                                                                  : {4'hF,
                                                                                                                                     ~(prob[1])};
          _x_times_k_T = {5'h0, prob} * {48'h0, k};
          _entropy_term_T =
            prob
            * ({11'h0, _x_times_k_T[52:16]} + {prob[46:0], 1'h0}
               - {16'h0, 32'h1 << k + 5'h9});
          entropy_acc <= entropy_acc + _entropy_term_T[47:16];
        end
      end
      if (_GEN_2 | ~_GEN_1) begin
      end
      else
        finalEntropy <= 32'h10000 - entropy_acc;
    end
  end // always @(posedge)
  AdaptiveThreshold threshold_ctrl (
    .clock            (clock),
    .reset            (reset),
    .io_entropy_in    ({16'h0, finalEntropy}),
    .io_entropy_valid (~_GEN_2 & _GEN_1),
    .io_encoding_mode (io_compression_mode)
  );
  assign io_done = state == 2'h2;
endmodule

module HuffmanTreeBuilder(
  input         clock,
                reset,
  input  [31:0] io_freqs_0,
                io_freqs_1,
                io_freqs_2,
                io_freqs_3,
                io_freqs_4,
                io_freqs_5,
                io_freqs_6,
                io_freqs_7,
  output        io_done,
  output [3:0]  io_depths_0,
                io_depths_1,
                io_depths_2,
                io_depths_3,
                io_depths_4,
                io_depths_5,
                io_depths_6,
                io_depths_7
);

  reg  [31:0] weight_0;
  reg  [31:0] weight_1;
  reg  [31:0] weight_2;
  reg  [31:0] weight_3;
  reg  [31:0] weight_4;
  reg  [31:0] weight_5;
  reg  [31:0] weight_6;
  reg  [31:0] weight_7;
  reg  [31:0] weight_8;
  reg  [31:0] weight_9;
  reg  [31:0] weight_10;
  reg  [31:0] weight_11;
  reg  [31:0] weight_12;
  reg  [31:0] weight_13;
  reg  [31:0] weight_14;
  reg         valid_0;
  reg         valid_1;
  reg         valid_2;
  reg         valid_3;
  reg         valid_4;
  reg         valid_5;
  reg         valid_6;
  reg         valid_7;
  reg         valid_8;
  reg         valid_9;
  reg         valid_10;
  reg         valid_11;
  reg         valid_12;
  reg         valid_13;
  reg         valid_14;
  reg  [3:0]  depthArr_0;
  reg  [3:0]  depthArr_1;
  reg  [3:0]  depthArr_2;
  reg  [3:0]  depthArr_3;
  reg  [3:0]  depthArr_4;
  reg  [3:0]  depthArr_5;
  reg  [3:0]  depthArr_6;
  reg  [3:0]  depthArr_7;
  reg  [3:0]  depthArr_8;
  reg  [3:0]  depthArr_9;
  reg  [3:0]  depthArr_10;
  reg  [3:0]  depthArr_11;
  reg  [3:0]  depthArr_12;
  reg  [3:0]  depthArr_13;
  reg  [3:0]  depthArr_14;
  reg  [1:0]  state;
  reg  [3:0]  nodeCnt;
  wire        _GEN = state == 2'h0;
  wire        _GEN_0 = state == 2'h1;
  wire        _GEN_1 = state == 2'h2;
  wire        _GEN_2 = nodeCnt != 4'hF;
  always @(posedge clock) begin
    automatic logic [32:0] _GEN_3 = {1'h0, weight_0};
    automatic logic [32:0] maskedWeights_0 = valid_0 ? _GEN_3 : 33'hFFFFFFFF;
    automatic logic [32:0] _GEN_4 = {1'h0, weight_1};
    automatic logic [32:0] maskedWeights_1 = valid_1 ? _GEN_4 : 33'hFFFFFFFF;
    automatic logic [32:0] _GEN_5 = {1'h0, weight_2};
    automatic logic [32:0] maskedWeights_2 = valid_2 ? _GEN_5 : 33'hFFFFFFFF;
    automatic logic [32:0] _GEN_6 = {1'h0, weight_3};
    automatic logic [32:0] maskedWeights_3 = valid_3 ? _GEN_6 : 33'hFFFFFFFF;
    automatic logic [32:0] _GEN_7 = {1'h0, weight_4};
    automatic logic [32:0] maskedWeights_4 = valid_4 ? _GEN_7 : 33'hFFFFFFFF;
    automatic logic [32:0] _GEN_8 = {1'h0, weight_5};
    automatic logic [32:0] maskedWeights_5 = valid_5 ? _GEN_8 : 33'hFFFFFFFF;
    automatic logic [32:0] _GEN_9 = {1'h0, weight_6};
    automatic logic [32:0] maskedWeights_6 = valid_6 ? _GEN_9 : 33'hFFFFFFFF;
    automatic logic [32:0] _GEN_10 = {1'h0, weight_7};
    automatic logic [32:0] maskedWeights_7 = valid_7 ? _GEN_10 : 33'hFFFFFFFF;
    automatic logic [32:0] _GEN_11 = {1'h0, weight_8};
    automatic logic [32:0] maskedWeights_8 = valid_8 ? _GEN_11 : 33'hFFFFFFFF;
    automatic logic [32:0] _GEN_12 = {1'h0, weight_9};
    automatic logic [32:0] maskedWeights_9 = valid_9 ? _GEN_12 : 33'hFFFFFFFF;
    automatic logic [32:0] _GEN_13 = {1'h0, weight_10};
    automatic logic [32:0] maskedWeights_10 = valid_10 ? _GEN_13 : 33'hFFFFFFFF;
    automatic logic [32:0] _GEN_14 = {1'h0, weight_11};
    automatic logic [32:0] maskedWeights_11 = valid_11 ? _GEN_14 : 33'hFFFFFFFF;
    automatic logic [32:0] _GEN_15 = {1'h0, weight_12};
    automatic logic [32:0] maskedWeights_12 = valid_12 ? _GEN_15 : 33'hFFFFFFFF;
    automatic logic [32:0] _GEN_16 = {1'h0, weight_13};
    automatic logic [32:0] maskedWeights_13 = valid_13 ? _GEN_16 : 33'hFFFFFFFF;
    automatic logic [32:0] _GEN_17 = {1'h0, weight_14};
    automatic logic [32:0] maskedWeights_14 = valid_14 ? _GEN_17 : 33'hFFFFFFFF;
    automatic logic [32:0] _min1Val_T_1 =
      maskedWeights_0 <= maskedWeights_1 ? maskedWeights_0 : maskedWeights_1;
    automatic logic [32:0] _min1Val_T_3 =
      _min1Val_T_1 <= maskedWeights_2 ? _min1Val_T_1 : maskedWeights_2;
    automatic logic [32:0] _min1Val_T_5 =
      _min1Val_T_3 <= maskedWeights_3 ? _min1Val_T_3 : maskedWeights_3;
    automatic logic [32:0] _min1Val_T_7 =
      _min1Val_T_5 <= maskedWeights_4 ? _min1Val_T_5 : maskedWeights_4;
    automatic logic [32:0] _min1Val_T_9 =
      _min1Val_T_7 <= maskedWeights_5 ? _min1Val_T_7 : maskedWeights_5;
    automatic logic [32:0] _min1Val_T_11 =
      _min1Val_T_9 <= maskedWeights_6 ? _min1Val_T_9 : maskedWeights_6;
    automatic logic [32:0] _min1Val_T_13 =
      _min1Val_T_11 <= maskedWeights_7 ? _min1Val_T_11 : maskedWeights_7;
    automatic logic [32:0] _min1Val_T_15 =
      _min1Val_T_13 <= maskedWeights_8 ? _min1Val_T_13 : maskedWeights_8;
    automatic logic [32:0] _min1Val_T_17 =
      _min1Val_T_15 <= maskedWeights_9 ? _min1Val_T_15 : maskedWeights_9;
    automatic logic [32:0] _min1Val_T_19 =
      _min1Val_T_17 <= maskedWeights_10 ? _min1Val_T_17 : maskedWeights_10;
    automatic logic [32:0] _min1Val_T_21 =
      _min1Val_T_19 <= maskedWeights_11 ? _min1Val_T_19 : maskedWeights_11;
    automatic logic [32:0] _min1Val_T_23 =
      _min1Val_T_21 <= maskedWeights_12 ? _min1Val_T_21 : maskedWeights_12;
    automatic logic [32:0] _min1Val_T_25 =
      _min1Val_T_23 <= maskedWeights_13 ? _min1Val_T_23 : maskedWeights_13;
    automatic logic [32:0] min1Val =
      _min1Val_T_25 <= maskedWeights_14 ? _min1Val_T_25 : maskedWeights_14;
    automatic logic [3:0]  i1;
    automatic logic [32:0] maskedWeights2_0;
    automatic logic [32:0] maskedWeights2_1;
    automatic logic [32:0] maskedWeights2_2;
    automatic logic [32:0] maskedWeights2_3;
    automatic logic [32:0] maskedWeights2_4;
    automatic logic [32:0] maskedWeights2_5;
    automatic logic [32:0] maskedWeights2_6;
    automatic logic [32:0] maskedWeights2_7;
    automatic logic [32:0] maskedWeights2_8;
    automatic logic [32:0] maskedWeights2_9;
    automatic logic [32:0] maskedWeights2_10;
    automatic logic [32:0] maskedWeights2_11;
    automatic logic [32:0] maskedWeights2_12;
    automatic logic [32:0] maskedWeights2_13;
    automatic logic [32:0] maskedWeights2_14;
    automatic logic [32:0] _min2Val_T_1;
    automatic logic [32:0] _min2Val_T_3;
    automatic logic [32:0] _min2Val_T_5;
    automatic logic [32:0] _min2Val_T_7;
    automatic logic [32:0] _min2Val_T_9;
    automatic logic [32:0] _min2Val_T_11;
    automatic logic [32:0] _min2Val_T_13;
    automatic logic [32:0] _min2Val_T_15;
    automatic logic [32:0] _min2Val_T_17;
    automatic logic [32:0] _min2Val_T_19;
    automatic logic [32:0] _min2Val_T_21;
    automatic logic [32:0] _min2Val_T_23;
    automatic logic [32:0] _min2Val_T_25;
    automatic logic [32:0] min2Val;
    automatic logic [3:0]  i2;
    automatic logic        _GEN_18;
    automatic logic        _GEN_19;
    automatic logic        _GEN_20;
    automatic logic        _GEN_21;
    automatic logic        _GEN_22;
    automatic logic        _GEN_23;
    automatic logic        _GEN_24;
    automatic logic        _GEN_25;
    automatic logic        _GEN_26;
    automatic logic        _GEN_27;
    automatic logic        _GEN_28;
    automatic logic        _GEN_29;
    automatic logic        _GEN_30;
    automatic logic        _GEN_31;
    automatic logic        _GEN_32;
    automatic logic        _GEN_33;
    automatic logic        _GEN_34;
    automatic logic        _GEN_35;
    automatic logic        _GEN_36;
    automatic logic        _GEN_37;
    automatic logic        _GEN_38;
    automatic logic        _GEN_39;
    automatic logic        _GEN_40;
    automatic logic        _GEN_41;
    automatic logic        _GEN_42;
    automatic logic        _GEN_43;
    automatic logic        _GEN_44;
    automatic logic        _GEN_45;
    automatic logic        _GEN_46;
    automatic logic        _GEN_47;
    i1 =
      maskedWeights_0 == min1Val & valid_0
        ? 4'h0
        : maskedWeights_1 == min1Val & valid_1
            ? 4'h1
            : maskedWeights_2 == min1Val & valid_2
                ? 4'h2
                : maskedWeights_3 == min1Val & valid_3
                    ? 4'h3
                    : maskedWeights_4 == min1Val & valid_4
                        ? 4'h4
                        : maskedWeights_5 == min1Val & valid_5
                            ? 4'h5
                            : maskedWeights_6 == min1Val & valid_6
                                ? 4'h6
                                : maskedWeights_7 == min1Val & valid_7
                                    ? 4'h7
                                    : maskedWeights_8 == min1Val & valid_8
                                        ? 4'h8
                                        : maskedWeights_9 == min1Val & valid_9
                                            ? 4'h9
                                            : maskedWeights_10 == min1Val & valid_10
                                                ? 4'hA
                                                : maskedWeights_11 == min1Val & valid_11
                                                    ? 4'hB
                                                    : maskedWeights_12 == min1Val
                                                      & valid_12
                                                        ? 4'hC
                                                        : maskedWeights_13 == min1Val
                                                          & valid_13
                                                            ? 4'hD
                                                            : 4'hE;
    maskedWeights2_0 = (|i1) & valid_0 ? _GEN_3 : 33'hFFFFFFFF;
    maskedWeights2_1 = i1 == 4'h1 | ~valid_1 ? 33'hFFFFFFFF : _GEN_4;
    maskedWeights2_2 = i1 == 4'h2 | ~valid_2 ? 33'hFFFFFFFF : _GEN_5;
    maskedWeights2_3 = i1 == 4'h3 | ~valid_3 ? 33'hFFFFFFFF : _GEN_6;
    maskedWeights2_4 = i1 == 4'h4 | ~valid_4 ? 33'hFFFFFFFF : _GEN_7;
    maskedWeights2_5 = i1 == 4'h5 | ~valid_5 ? 33'hFFFFFFFF : _GEN_8;
    maskedWeights2_6 = i1 == 4'h6 | ~valid_6 ? 33'hFFFFFFFF : _GEN_9;
    maskedWeights2_7 = i1 == 4'h7 | ~valid_7 ? 33'hFFFFFFFF : _GEN_10;
    maskedWeights2_8 = i1 == 4'h8 | ~valid_8 ? 33'hFFFFFFFF : _GEN_11;
    maskedWeights2_9 = i1 == 4'h9 | ~valid_9 ? 33'hFFFFFFFF : _GEN_12;
    maskedWeights2_10 = i1 == 4'hA | ~valid_10 ? 33'hFFFFFFFF : _GEN_13;
    maskedWeights2_11 = i1 == 4'hB | ~valid_11 ? 33'hFFFFFFFF : _GEN_14;
    maskedWeights2_12 = i1 == 4'hC | ~valid_12 ? 33'hFFFFFFFF : _GEN_15;
    maskedWeights2_13 = i1 == 4'hD | ~valid_13 ? 33'hFFFFFFFF : _GEN_16;
    maskedWeights2_14 = i1 == 4'hE | ~valid_14 ? 33'hFFFFFFFF : _GEN_17;
    _min2Val_T_1 =
      maskedWeights2_0 <= maskedWeights2_1 ? maskedWeights2_0 : maskedWeights2_1;
    _min2Val_T_3 = _min2Val_T_1 <= maskedWeights2_2 ? _min2Val_T_1 : maskedWeights2_2;
    _min2Val_T_5 = _min2Val_T_3 <= maskedWeights2_3 ? _min2Val_T_3 : maskedWeights2_3;
    _min2Val_T_7 = _min2Val_T_5 <= maskedWeights2_4 ? _min2Val_T_5 : maskedWeights2_4;
    _min2Val_T_9 = _min2Val_T_7 <= maskedWeights2_5 ? _min2Val_T_7 : maskedWeights2_5;
    _min2Val_T_11 = _min2Val_T_9 <= maskedWeights2_6 ? _min2Val_T_9 : maskedWeights2_6;
    _min2Val_T_13 = _min2Val_T_11 <= maskedWeights2_7 ? _min2Val_T_11 : maskedWeights2_7;
    _min2Val_T_15 = _min2Val_T_13 <= maskedWeights2_8 ? _min2Val_T_13 : maskedWeights2_8;
    _min2Val_T_17 = _min2Val_T_15 <= maskedWeights2_9 ? _min2Val_T_15 : maskedWeights2_9;
    _min2Val_T_19 =
      _min2Val_T_17 <= maskedWeights2_10 ? _min2Val_T_17 : maskedWeights2_10;
    _min2Val_T_21 =
      _min2Val_T_19 <= maskedWeights2_11 ? _min2Val_T_19 : maskedWeights2_11;
    _min2Val_T_23 =
      _min2Val_T_21 <= maskedWeights2_12 ? _min2Val_T_21 : maskedWeights2_12;
    _min2Val_T_25 =
      _min2Val_T_23 <= maskedWeights2_13 ? _min2Val_T_23 : maskedWeights2_13;
    min2Val = _min2Val_T_25 <= maskedWeights2_14 ? _min2Val_T_25 : maskedWeights2_14;
    i2 =
      maskedWeights2_0 == min2Val & valid_0
        ? 4'h0
        : maskedWeights2_1 == min2Val & valid_1
            ? 4'h1
            : maskedWeights2_2 == min2Val & valid_2
                ? 4'h2
                : maskedWeights2_3 == min2Val & valid_3
                    ? 4'h3
                    : maskedWeights2_4 == min2Val & valid_4
                        ? 4'h4
                        : maskedWeights2_5 == min2Val & valid_5
                            ? 4'h5
                            : maskedWeights2_6 == min2Val & valid_6
                                ? 4'h6
                                : maskedWeights2_7 == min2Val & valid_7
                                    ? 4'h7
                                    : maskedWeights2_8 == min2Val & valid_8
                                        ? 4'h8
                                        : maskedWeights2_9 == min2Val & valid_9
                                            ? 4'h9
                                            : maskedWeights2_10 == min2Val & valid_10
                                                ? 4'hA
                                                : maskedWeights2_11 == min2Val & valid_11
                                                    ? 4'hB
                                                    : maskedWeights2_12 == min2Val
                                                      & valid_12
                                                        ? 4'hC
                                                        : maskedWeights2_13 == min2Val
                                                          & valid_13
                                                            ? 4'hD
                                                            : 4'hE;
    _GEN_18 = nodeCnt == 4'h0;
    _GEN_19 = _GEN_1 & _GEN_2 & _GEN_18;
    _GEN_20 = nodeCnt == 4'h1;
    _GEN_21 = _GEN_1 & _GEN_2 & _GEN_20;
    _GEN_22 = nodeCnt == 4'h2;
    _GEN_23 = _GEN_1 & _GEN_2 & _GEN_22;
    _GEN_24 = nodeCnt == 4'h3;
    _GEN_25 = _GEN_1 & _GEN_2 & _GEN_24;
    _GEN_26 = nodeCnt == 4'h4;
    _GEN_27 = _GEN_1 & _GEN_2 & _GEN_26;
    _GEN_28 = nodeCnt == 4'h5;
    _GEN_29 = _GEN_1 & _GEN_2 & _GEN_28;
    _GEN_30 = nodeCnt == 4'h6;
    _GEN_31 = _GEN_1 & _GEN_2 & _GEN_30;
    _GEN_32 = nodeCnt == 4'h7;
    _GEN_33 = _GEN_1 & _GEN_2 & _GEN_32;
    _GEN_34 = nodeCnt == 4'h8;
    _GEN_35 = _GEN_1 & _GEN_2 & _GEN_34;
    _GEN_36 = nodeCnt == 4'h9;
    _GEN_37 = _GEN_1 & _GEN_2 & _GEN_36;
    _GEN_38 = nodeCnt == 4'hA;
    _GEN_39 = _GEN_1 & _GEN_2 & _GEN_38;
    _GEN_40 = nodeCnt == 4'hB;
    _GEN_41 = _GEN_1 & _GEN_2 & _GEN_40;
    _GEN_42 = nodeCnt == 4'hC;
    _GEN_43 = _GEN_1 & _GEN_2 & _GEN_42;
    _GEN_44 = nodeCnt == 4'hD;
    _GEN_45 = _GEN_1 & _GEN_2 & _GEN_44;
    _GEN_46 = nodeCnt == 4'hE;
    _GEN_47 = _GEN_1 & _GEN_2 & _GEN_46;
    if (~_GEN) begin
      if (_GEN_0) begin
        weight_0 <= io_freqs_0;
        weight_1 <= io_freqs_1;
        weight_2 <= io_freqs_2;
        weight_3 <= io_freqs_3;
        weight_4 <= io_freqs_4;
        weight_5 <= io_freqs_5;
        weight_6 <= io_freqs_6;
        weight_7 <= io_freqs_7;
        weight_8 <= 32'h0;
        weight_9 <= 32'h0;
        weight_10 <= 32'h0;
        weight_11 <= 32'h0;
        weight_12 <= 32'h0;
        weight_13 <= 32'h0;
        weight_14 <= 32'h0;
      end
      else begin
        automatic logic [15:0][31:0] _GEN_48 =
          {{weight_0},
           {weight_14},
           {weight_13},
           {weight_12},
           {weight_11},
           {weight_10},
           {weight_9},
           {weight_8},
           {weight_7},
           {weight_6},
           {weight_5},
           {weight_4},
           {weight_3},
           {weight_2},
           {weight_1},
           {weight_0}};
        automatic logic [31:0]       _wsum_T;
        _wsum_T = _GEN_48[i1] + _GEN_48[i2];
        if (_GEN_19)
          weight_0 <= _wsum_T;
        if (_GEN_21)
          weight_1 <= _wsum_T;
        if (_GEN_23)
          weight_2 <= _wsum_T;
        if (_GEN_25)
          weight_3 <= _wsum_T;
        if (_GEN_27)
          weight_4 <= _wsum_T;
        if (_GEN_29)
          weight_5 <= _wsum_T;
        if (_GEN_31)
          weight_6 <= _wsum_T;
        if (_GEN_33)
          weight_7 <= _wsum_T;
        if (_GEN_35)
          weight_8 <= _wsum_T;
        if (_GEN_37)
          weight_9 <= _wsum_T;
        if (_GEN_39)
          weight_10 <= _wsum_T;
        if (_GEN_41)
          weight_11 <= _wsum_T;
        if (_GEN_43)
          weight_12 <= _wsum_T;
        if (_GEN_45)
          weight_13 <= _wsum_T;
        if (_GEN_47)
          weight_14 <= _wsum_T;
      end
    end
    if (reset) begin
      valid_0 <= 1'h0;
      valid_1 <= 1'h0;
      valid_2 <= 1'h0;
      valid_3 <= 1'h0;
      valid_4 <= 1'h0;
      valid_5 <= 1'h0;
      valid_6 <= 1'h0;
      valid_7 <= 1'h0;
      valid_8 <= 1'h0;
      valid_9 <= 1'h0;
      valid_10 <= 1'h0;
      valid_11 <= 1'h0;
      valid_12 <= 1'h0;
      valid_13 <= 1'h0;
      valid_14 <= 1'h0;
      depthArr_0 <= 4'h0;
      depthArr_1 <= 4'h0;
      depthArr_2 <= 4'h0;
      depthArr_3 <= 4'h0;
      depthArr_4 <= 4'h0;
      depthArr_5 <= 4'h0;
      depthArr_6 <= 4'h0;
      depthArr_7 <= 4'h0;
      depthArr_8 <= 4'h0;
      depthArr_9 <= 4'h0;
      depthArr_10 <= 4'h0;
      depthArr_11 <= 4'h0;
      depthArr_12 <= 4'h0;
      depthArr_13 <= 4'h0;
      depthArr_14 <= 4'h0;
      state <= 2'h0;
      nodeCnt <= 4'h0;
    end
    else begin
      automatic logic [3:0][1:0] _GEN_49 =
        {{2'h0}, {_GEN_2 ? state : 2'h3}, {2'h2}, {state}};
      if (~_GEN) begin
        automatic logic _GEN_50;
        _GEN_50 = _GEN_1 & _GEN_2;
        valid_0 <=
          _GEN_0 | (_GEN_50 ? _GEN_18 | ~(i2 == 4'h0 | ~(|i1)) & valid_0 : valid_0);
        valid_1 <=
          _GEN_0 | (_GEN_50 ? _GEN_20 | ~(i2 == 4'h1 | i1 == 4'h1) & valid_1 : valid_1);
        valid_2 <=
          _GEN_0 | (_GEN_50 ? _GEN_22 | ~(i2 == 4'h2 | i1 == 4'h2) & valid_2 : valid_2);
        valid_3 <=
          _GEN_0 | (_GEN_50 ? _GEN_24 | ~(i2 == 4'h3 | i1 == 4'h3) & valid_3 : valid_3);
        valid_4 <=
          _GEN_0 | (_GEN_50 ? _GEN_26 | ~(i2 == 4'h4 | i1 == 4'h4) & valid_4 : valid_4);
        valid_5 <=
          _GEN_0 | (_GEN_50 ? _GEN_28 | ~(i2 == 4'h5 | i1 == 4'h5) & valid_5 : valid_5);
        valid_6 <=
          _GEN_0 | (_GEN_50 ? _GEN_30 | ~(i2 == 4'h6 | i1 == 4'h6) & valid_6 : valid_6);
        valid_7 <=
          _GEN_0 | (_GEN_50 ? _GEN_32 | ~(i2 == 4'h7 | i1 == 4'h7) & valid_7 : valid_7);
        valid_8 <=
          ~_GEN_0 & (_GEN_50 ? _GEN_34 | ~(i2 == 4'h8 | i1 == 4'h8) & valid_8 : valid_8);
        valid_9 <=
          ~_GEN_0 & (_GEN_50 ? _GEN_36 | ~(i2 == 4'h9 | i1 == 4'h9) & valid_9 : valid_9);
        valid_10 <=
          ~_GEN_0
          & (_GEN_50 ? _GEN_38 | ~(i2 == 4'hA | i1 == 4'hA) & valid_10 : valid_10);
        valid_11 <=
          ~_GEN_0
          & (_GEN_50 ? _GEN_40 | ~(i2 == 4'hB | i1 == 4'hB) & valid_11 : valid_11);
        valid_12 <=
          ~_GEN_0
          & (_GEN_50 ? _GEN_42 | ~(i2 == 4'hC | i1 == 4'hC) & valid_12 : valid_12);
        valid_13 <=
          ~_GEN_0
          & (_GEN_50 ? _GEN_44 | ~(i2 == 4'hD | i1 == 4'hD) & valid_13 : valid_13);
        valid_14 <=
          ~_GEN_0
          & (_GEN_50 ? _GEN_46 | ~(i2 == 4'hE | i1 == 4'hE) & valid_14 : valid_14);
        if (_GEN_0) begin
          depthArr_0 <= 4'h0;
          depthArr_1 <= 4'h0;
          depthArr_2 <= 4'h0;
          depthArr_3 <= 4'h0;
          depthArr_4 <= 4'h0;
          depthArr_5 <= 4'h0;
          depthArr_6 <= 4'h0;
          depthArr_7 <= 4'h0;
          depthArr_8 <= 4'h0;
          depthArr_9 <= 4'h0;
          depthArr_10 <= 4'h0;
          depthArr_11 <= 4'h0;
          depthArr_12 <= 4'h0;
          depthArr_13 <= 4'h0;
          depthArr_14 <= 4'h0;
          nodeCnt <= 4'h8;
        end
        else begin
          automatic logic [15:0][3:0] _GEN_51 =
            {{depthArr_0},
             {depthArr_14},
             {depthArr_13},
             {depthArr_12},
             {depthArr_11},
             {depthArr_10},
             {depthArr_9},
             {depthArr_8},
             {depthArr_7},
             {depthArr_6},
             {depthArr_5},
             {depthArr_4},
             {depthArr_3},
             {depthArr_2},
             {depthArr_1},
             {depthArr_0}};
          automatic logic [3:0]       _GEN_52;
          automatic logic [3:0]       _GEN_53;
          automatic logic [3:0]       _depthArr_T_2;
          _GEN_52 = _GEN_51[i1];
          _GEN_53 = _GEN_51[i2];
          _depthArr_T_2 = (_GEN_52 >= _GEN_53 ? _GEN_52 : _GEN_53) + 4'h1;
          if (_GEN_19)
            depthArr_0 <= _depthArr_T_2;
          if (_GEN_21)
            depthArr_1 <= _depthArr_T_2;
          if (_GEN_23)
            depthArr_2 <= _depthArr_T_2;
          if (_GEN_25)
            depthArr_3 <= _depthArr_T_2;
          if (_GEN_27)
            depthArr_4 <= _depthArr_T_2;
          if (_GEN_29)
            depthArr_5 <= _depthArr_T_2;
          if (_GEN_31)
            depthArr_6 <= _depthArr_T_2;
          if (_GEN_33)
            depthArr_7 <= _depthArr_T_2;
          if (_GEN_35)
            depthArr_8 <= _depthArr_T_2;
          if (_GEN_37)
            depthArr_9 <= _depthArr_T_2;
          if (_GEN_39)
            depthArr_10 <= _depthArr_T_2;
          if (_GEN_41)
            depthArr_11 <= _depthArr_T_2;
          if (_GEN_43)
            depthArr_12 <= _depthArr_T_2;
          if (_GEN_45)
            depthArr_13 <= _depthArr_T_2;
          if (_GEN_47)
            depthArr_14 <= _depthArr_T_2;
          if (_GEN_50)
            nodeCnt <= nodeCnt + 4'h1;
        end
      end
      state <= _GEN_49[state];
    end
  end // always @(posedge)
  assign io_done = ~(_GEN | _GEN_0) & _GEN_1 & ~_GEN_2;
  assign io_depths_0 = depthArr_0;
  assign io_depths_1 = depthArr_1;
  assign io_depths_2 = depthArr_2;
  assign io_depths_3 = depthArr_3;
  assign io_depths_4 = depthArr_4;
  assign io_depths_5 = depthArr_5;
  assign io_depths_6 = depthArr_6;
  assign io_depths_7 = depthArr_7;
endmodule

module tree_adjust(
  input        clock,
               reset,
  input  [5:0] io_depths_in_0,
               io_depths_in_1,
               io_depths_in_2,
               io_depths_in_3,
               io_depths_in_4,
               io_depths_in_5,
               io_depths_in_6,
               io_depths_in_7,
  output [5:0] io_depths_out_0,
               io_depths_out_1,
               io_depths_out_2,
               io_depths_out_3,
               io_depths_out_4,
               io_depths_out_5,
               io_depths_out_6,
               io_depths_out_7,
  output       io_done
);

  reg [5:0] hist_0;
  reg [5:0] hist_1;
  reg [5:0] hist_2;
  reg [5:0] hist_3;
  reg [5:0] hist_4;
  reg [5:0] hist_5;
  reg [5:0] hist_6;
  reg [5:0] hist_7;
  reg [5:0] hist_8;
  reg [5:0] hist_9;
  reg [5:0] hist_10;
  reg [5:0] hist_11;
  reg [5:0] hist_12;
  reg [5:0] hist_13;
  reg [5:0] hist_14;
  reg [5:0] hist_15;
  reg [5:0] hist_16;
  reg [5:0] hist_17;
  reg [5:0] hist_18;
  reg [5:0] hist_19;
  reg [5:0] hist_20;
  reg [5:0] hist_21;
  reg [5:0] hist_22;
  reg [5:0] hist_23;
  reg [5:0] hist_24;
  reg [5:0] hist_25;
  reg [5:0] hist_26;
  reg [5:0] hist_27;
  reg [5:0] hist_28;
  reg [5:0] hist_29;
  reg [5:0] hist_30;
  reg [5:0] hist_31;
  reg [5:0] hist_32;
  reg [5:0] migrated;
  reg [5:0] K;
  reg [5:0] holesLeft;
  reg [5:0] outDepth_0;
  reg [5:0] outDepth_1;
  reg [5:0] outDepth_2;
  reg [5:0] outDepth_3;
  reg [5:0] outDepth_4;
  reg [5:0] outDepth_5;
  reg [5:0] outDepth_6;
  reg [5:0] outDepth_7;
  reg [5:0] assignPtr;
  reg [2:0] state;
  reg [5:0] cnts_0;
  reg [5:0] cnts_1;
  reg [5:0] cnts_2;
  reg [5:0] cnts_3;
  reg [5:0] cnts_4;
  reg [5:0] cnts_5;
  reg [5:0] cnts_6;
  reg [5:0] cnts_7;
  reg [5:0] cnts_8;
  reg [5:0] cnts_9;
  reg [5:0] cnts_10;
  reg [5:0] cnts_11;
  reg [5:0] cnts_12;
  reg [5:0] cnts_13;
  reg [5:0] cnts_14;
  reg [5:0] cnts_15;
  reg [5:0] cnts_16;
  reg [5:0] cnts_17;
  reg [5:0] cnts_18;
  reg [5:0] cnts_19;
  reg [5:0] cnts_20;
  reg [5:0] cnts_21;
  reg [5:0] cnts_22;
  reg [5:0] cnts_23;
  reg [5:0] cnts_24;
  reg [5:0] cnts_25;
  reg [5:0] cnts_26;
  reg [5:0] cnts_27;
  reg [5:0] cnts_28;
  reg [5:0] cnts_29;
  reg [5:0] cnts_30;
  reg [5:0] cnts_31;
  reg [5:0] cnts_32;
  always @(posedge clock) begin
    automatic logic        _GEN;
    automatic logic        _GEN_0;
    automatic logic        _GEN_1;
    automatic logic [14:0] _canMigrate_T;
    automatic logic        _GEN_2;
    automatic logic        _GEN_3;
    automatic logic        _GEN_4;
    automatic logic        _GEN_5;
    automatic logic        _GEN_6;
    automatic logic        _GEN_7;
    automatic logic [5:0]  sel_1;
    automatic logic        _GEN_8;
    automatic logic        _GEN_9;
    _GEN = state == 3'h0;
    _GEN_0 = state == 3'h1;
    _GEN_1 = state == 3'h2;
    _canMigrate_T =
      {|hist_15,
       |hist_14,
       |hist_13,
       |hist_12,
       |hist_11,
       |hist_10,
       |hist_9,
       |hist_8,
       |hist_7,
       |hist_6,
       |hist_5,
       |hist_4,
       |hist_3,
       |hist_2,
       |hist_1};
    _GEN_2 = migrated >= K | ~(|_canMigrate_T);
    _GEN_3 = state == 3'h3;
    _GEN_4 =
      (|holesLeft)
      & (|{|hist_17,
           |hist_18,
           |hist_19,
           |hist_20,
           |hist_21,
           |hist_22,
           |hist_23,
           |hist_24,
           |hist_25,
           |hist_26,
           |hist_27,
           |hist_28,
           |hist_29,
           |hist_30,
           |hist_31,
           |hist_32});
    _GEN_5 = _GEN_3 & _GEN_4;
    _GEN_6 = state == 3'h4;
    _GEN_7 = assignPtr < 6'h8;
    sel_1 =
      (|cnts_0)
        ? 6'h0
        : (|cnts_1)
            ? 6'h1
            : (|cnts_2)
                ? 6'h2
                : (|cnts_3)
                    ? 6'h3
                    : (|cnts_4)
                        ? 6'h4
                        : (|cnts_5)
                            ? 6'h5
                            : (|cnts_6)
                                ? 6'h6
                                : (|cnts_7)
                                    ? 6'h7
                                    : (|cnts_8)
                                        ? 6'h8
                                        : (|cnts_9)
                                            ? 6'h9
                                            : (|cnts_10)
                                                ? 6'hA
                                                : (|cnts_11)
                                                    ? 6'hB
                                                    : (|cnts_12)
                                                        ? 6'hC
                                                        : (|cnts_13)
                                                            ? 6'hD
                                                            : (|cnts_14)
                                                                ? 6'hE
                                                                : (|cnts_15)
                                                                    ? 6'hF
                                                                    : (|cnts_16)
                                                                        ? 6'h10
                                                                        : (|cnts_17)
                                                                            ? 6'h11
                                                                            : (|cnts_18)
                                                                                ? 6'h12
                                                                                : (|cnts_19)
                                                                                    ? 6'h13
                                                                                    : (|cnts_20)
                                                                                        ? 6'h14
                                                                                        : (|cnts_21)
                                                                                            ? 6'h15
                                                                                            : (|cnts_22)
                                                                                                ? 6'h16
                                                                                                : (|cnts_23)
                                                                                                    ? 6'h17
                                                                                                    : (|cnts_24)
                                                                                                        ? 6'h18
                                                                                                        : (|cnts_25)
                                                                                                            ? 6'h19
                                                                                                            : (|cnts_26)
                                                                                                                ? 6'h1A
                                                                                                                : (|cnts_27)
                                                                                                                    ? 6'h1B
                                                                                                                    : (|cnts_28)
                                                                                                                        ? 6'h1C
                                                                                                                        : (|cnts_29)
                                                                                                                            ? 6'h1D
                                                                                                                            : (|cnts_30)
                                                                                                                                ? 6'h1E
                                                                                                                                : (|cnts_31)
                                                                                                                                    ? 6'h1F
                                                                                                                                    : 6'h20;
    _GEN_8 = _GEN | _GEN_0 | _GEN_1 | _GEN_3;
    _GEN_9 = _GEN | _GEN_0 | _GEN_1;
    if (reset) begin
      hist_0 <= 6'h0;
      hist_1 <= 6'h0;
      hist_2 <= 6'h0;
      hist_3 <= 6'h0;
      hist_4 <= 6'h0;
      hist_5 <= 6'h0;
      hist_6 <= 6'h0;
      hist_7 <= 6'h0;
      hist_8 <= 6'h0;
      hist_9 <= 6'h0;
      hist_10 <= 6'h0;
      hist_11 <= 6'h0;
      hist_12 <= 6'h0;
      hist_13 <= 6'h0;
      hist_14 <= 6'h0;
      hist_15 <= 6'h0;
      hist_16 <= 6'h0;
      hist_17 <= 6'h0;
      hist_18 <= 6'h0;
      hist_19 <= 6'h0;
      hist_20 <= 6'h0;
      hist_21 <= 6'h0;
      hist_22 <= 6'h0;
      hist_23 <= 6'h0;
      hist_24 <= 6'h0;
      hist_25 <= 6'h0;
      hist_26 <= 6'h0;
      hist_27 <= 6'h0;
      hist_28 <= 6'h0;
      hist_29 <= 6'h0;
      hist_30 <= 6'h0;
      hist_31 <= 6'h0;
      hist_32 <= 6'h0;
      migrated <= 6'h0;
      assignPtr <= 6'h0;
      state <= 3'h0;
    end
    else begin
      automatic logic [7:0][2:0] _GEN_10;
      if (~_GEN) begin
        automatic logic [63:0][5:0] _GEN_11;
        _GEN_11 =
          {{hist_0},
           {hist_0},
           {hist_0},
           {hist_0},
           {hist_0},
           {hist_0},
           {hist_0},
           {hist_0},
           {hist_0},
           {hist_0},
           {hist_0},
           {hist_0},
           {hist_0},
           {hist_0},
           {hist_0},
           {hist_0},
           {hist_0},
           {hist_0},
           {hist_0},
           {hist_0},
           {hist_0},
           {hist_0},
           {hist_0},
           {hist_0},
           {hist_0},
           {hist_0},
           {hist_0},
           {hist_0},
           {hist_0},
           {hist_0},
           {hist_0},
           {hist_32},
           {hist_31},
           {hist_30},
           {hist_29},
           {hist_28},
           {hist_27},
           {hist_26},
           {hist_25},
           {hist_24},
           {hist_23},
           {hist_22},
           {hist_21},
           {hist_20},
           {hist_19},
           {hist_18},
           {hist_17},
           {hist_16},
           {hist_15},
           {hist_14},
           {hist_13},
           {hist_12},
           {hist_11},
           {hist_10},
           {hist_9},
           {hist_8},
           {hist_7},
           {hist_6},
           {hist_5},
           {hist_4},
           {hist_3},
           {hist_2},
           {hist_1},
           {hist_0}};
        if (_GEN_0) begin
          automatic logic [5:0] _hist_T;
          automatic logic [5:0] _hist_T_2;
          automatic logic [5:0] _hist_T_4;
          automatic logic [5:0] _hist_T_6;
          automatic logic [5:0] _hist_T_8;
          automatic logic [5:0] _hist_T_10;
          automatic logic [5:0] _hist_T_12;
          automatic logic [5:0] _hist_T_14;
          _hist_T = _GEN_11[io_depths_in_0] + 6'h1;
          _hist_T_2 = _GEN_11[io_depths_in_1] + 6'h1;
          _hist_T_4 = _GEN_11[io_depths_in_2] + 6'h1;
          _hist_T_6 = _GEN_11[io_depths_in_3] + 6'h1;
          _hist_T_8 = _GEN_11[io_depths_in_4] + 6'h1;
          _hist_T_10 = _GEN_11[io_depths_in_5] + 6'h1;
          _hist_T_12 = _GEN_11[io_depths_in_6] + 6'h1;
          _hist_T_14 = _GEN_11[io_depths_in_7] + 6'h1;
          if (io_depths_in_7 == 6'h0)
            hist_0 <= _hist_T_14;
          else if (io_depths_in_6 == 6'h0)
            hist_0 <= _hist_T_12;
          else if (io_depths_in_5 == 6'h0)
            hist_0 <= _hist_T_10;
          else if (io_depths_in_4 == 6'h0)
            hist_0 <= _hist_T_8;
          else if (io_depths_in_3 == 6'h0)
            hist_0 <= _hist_T_6;
          else if (io_depths_in_2 == 6'h0)
            hist_0 <= _hist_T_4;
          else if (io_depths_in_1 == 6'h0)
            hist_0 <= _hist_T_2;
          else if (io_depths_in_0 == 6'h0)
            hist_0 <= _hist_T;
          else
            hist_0 <= 6'h0;
          if (io_depths_in_7 == 6'h1)
            hist_1 <= _hist_T_14;
          else if (io_depths_in_6 == 6'h1)
            hist_1 <= _hist_T_12;
          else if (io_depths_in_5 == 6'h1)
            hist_1 <= _hist_T_10;
          else if (io_depths_in_4 == 6'h1)
            hist_1 <= _hist_T_8;
          else if (io_depths_in_3 == 6'h1)
            hist_1 <= _hist_T_6;
          else if (io_depths_in_2 == 6'h1)
            hist_1 <= _hist_T_4;
          else if (io_depths_in_1 == 6'h1)
            hist_1 <= _hist_T_2;
          else if (io_depths_in_0 == 6'h1)
            hist_1 <= _hist_T;
          else
            hist_1 <= 6'h0;
          if (io_depths_in_7 == 6'h2)
            hist_2 <= _hist_T_14;
          else if (io_depths_in_6 == 6'h2)
            hist_2 <= _hist_T_12;
          else if (io_depths_in_5 == 6'h2)
            hist_2 <= _hist_T_10;
          else if (io_depths_in_4 == 6'h2)
            hist_2 <= _hist_T_8;
          else if (io_depths_in_3 == 6'h2)
            hist_2 <= _hist_T_6;
          else if (io_depths_in_2 == 6'h2)
            hist_2 <= _hist_T_4;
          else if (io_depths_in_1 == 6'h2)
            hist_2 <= _hist_T_2;
          else if (io_depths_in_0 == 6'h2)
            hist_2 <= _hist_T;
          else
            hist_2 <= 6'h0;
          if (io_depths_in_7 == 6'h3)
            hist_3 <= _hist_T_14;
          else if (io_depths_in_6 == 6'h3)
            hist_3 <= _hist_T_12;
          else if (io_depths_in_5 == 6'h3)
            hist_3 <= _hist_T_10;
          else if (io_depths_in_4 == 6'h3)
            hist_3 <= _hist_T_8;
          else if (io_depths_in_3 == 6'h3)
            hist_3 <= _hist_T_6;
          else if (io_depths_in_2 == 6'h3)
            hist_3 <= _hist_T_4;
          else if (io_depths_in_1 == 6'h3)
            hist_3 <= _hist_T_2;
          else if (io_depths_in_0 == 6'h3)
            hist_3 <= _hist_T;
          else
            hist_3 <= 6'h0;
          if (io_depths_in_7 == 6'h4)
            hist_4 <= _hist_T_14;
          else if (io_depths_in_6 == 6'h4)
            hist_4 <= _hist_T_12;
          else if (io_depths_in_5 == 6'h4)
            hist_4 <= _hist_T_10;
          else if (io_depths_in_4 == 6'h4)
            hist_4 <= _hist_T_8;
          else if (io_depths_in_3 == 6'h4)
            hist_4 <= _hist_T_6;
          else if (io_depths_in_2 == 6'h4)
            hist_4 <= _hist_T_4;
          else if (io_depths_in_1 == 6'h4)
            hist_4 <= _hist_T_2;
          else if (io_depths_in_0 == 6'h4)
            hist_4 <= _hist_T;
          else
            hist_4 <= 6'h0;
          if (io_depths_in_7 == 6'h5)
            hist_5 <= _hist_T_14;
          else if (io_depths_in_6 == 6'h5)
            hist_5 <= _hist_T_12;
          else if (io_depths_in_5 == 6'h5)
            hist_5 <= _hist_T_10;
          else if (io_depths_in_4 == 6'h5)
            hist_5 <= _hist_T_8;
          else if (io_depths_in_3 == 6'h5)
            hist_5 <= _hist_T_6;
          else if (io_depths_in_2 == 6'h5)
            hist_5 <= _hist_T_4;
          else if (io_depths_in_1 == 6'h5)
            hist_5 <= _hist_T_2;
          else if (io_depths_in_0 == 6'h5)
            hist_5 <= _hist_T;
          else
            hist_5 <= 6'h0;
          if (io_depths_in_7 == 6'h6)
            hist_6 <= _hist_T_14;
          else if (io_depths_in_6 == 6'h6)
            hist_6 <= _hist_T_12;
          else if (io_depths_in_5 == 6'h6)
            hist_6 <= _hist_T_10;
          else if (io_depths_in_4 == 6'h6)
            hist_6 <= _hist_T_8;
          else if (io_depths_in_3 == 6'h6)
            hist_6 <= _hist_T_6;
          else if (io_depths_in_2 == 6'h6)
            hist_6 <= _hist_T_4;
          else if (io_depths_in_1 == 6'h6)
            hist_6 <= _hist_T_2;
          else if (io_depths_in_0 == 6'h6)
            hist_6 <= _hist_T;
          else
            hist_6 <= 6'h0;
          if (io_depths_in_7 == 6'h7)
            hist_7 <= _hist_T_14;
          else if (io_depths_in_6 == 6'h7)
            hist_7 <= _hist_T_12;
          else if (io_depths_in_5 == 6'h7)
            hist_7 <= _hist_T_10;
          else if (io_depths_in_4 == 6'h7)
            hist_7 <= _hist_T_8;
          else if (io_depths_in_3 == 6'h7)
            hist_7 <= _hist_T_6;
          else if (io_depths_in_2 == 6'h7)
            hist_7 <= _hist_T_4;
          else if (io_depths_in_1 == 6'h7)
            hist_7 <= _hist_T_2;
          else if (io_depths_in_0 == 6'h7)
            hist_7 <= _hist_T;
          else
            hist_7 <= 6'h0;
          if (io_depths_in_7 == 6'h8)
            hist_8 <= _hist_T_14;
          else if (io_depths_in_6 == 6'h8)
            hist_8 <= _hist_T_12;
          else if (io_depths_in_5 == 6'h8)
            hist_8 <= _hist_T_10;
          else if (io_depths_in_4 == 6'h8)
            hist_8 <= _hist_T_8;
          else if (io_depths_in_3 == 6'h8)
            hist_8 <= _hist_T_6;
          else if (io_depths_in_2 == 6'h8)
            hist_8 <= _hist_T_4;
          else if (io_depths_in_1 == 6'h8)
            hist_8 <= _hist_T_2;
          else if (io_depths_in_0 == 6'h8)
            hist_8 <= _hist_T;
          else
            hist_8 <= 6'h0;
          if (io_depths_in_7 == 6'h9)
            hist_9 <= _hist_T_14;
          else if (io_depths_in_6 == 6'h9)
            hist_9 <= _hist_T_12;
          else if (io_depths_in_5 == 6'h9)
            hist_9 <= _hist_T_10;
          else if (io_depths_in_4 == 6'h9)
            hist_9 <= _hist_T_8;
          else if (io_depths_in_3 == 6'h9)
            hist_9 <= _hist_T_6;
          else if (io_depths_in_2 == 6'h9)
            hist_9 <= _hist_T_4;
          else if (io_depths_in_1 == 6'h9)
            hist_9 <= _hist_T_2;
          else if (io_depths_in_0 == 6'h9)
            hist_9 <= _hist_T;
          else
            hist_9 <= 6'h0;
          if (io_depths_in_7 == 6'hA)
            hist_10 <= _hist_T_14;
          else if (io_depths_in_6 == 6'hA)
            hist_10 <= _hist_T_12;
          else if (io_depths_in_5 == 6'hA)
            hist_10 <= _hist_T_10;
          else if (io_depths_in_4 == 6'hA)
            hist_10 <= _hist_T_8;
          else if (io_depths_in_3 == 6'hA)
            hist_10 <= _hist_T_6;
          else if (io_depths_in_2 == 6'hA)
            hist_10 <= _hist_T_4;
          else if (io_depths_in_1 == 6'hA)
            hist_10 <= _hist_T_2;
          else if (io_depths_in_0 == 6'hA)
            hist_10 <= _hist_T;
          else
            hist_10 <= 6'h0;
          if (io_depths_in_7 == 6'hB)
            hist_11 <= _hist_T_14;
          else if (io_depths_in_6 == 6'hB)
            hist_11 <= _hist_T_12;
          else if (io_depths_in_5 == 6'hB)
            hist_11 <= _hist_T_10;
          else if (io_depths_in_4 == 6'hB)
            hist_11 <= _hist_T_8;
          else if (io_depths_in_3 == 6'hB)
            hist_11 <= _hist_T_6;
          else if (io_depths_in_2 == 6'hB)
            hist_11 <= _hist_T_4;
          else if (io_depths_in_1 == 6'hB)
            hist_11 <= _hist_T_2;
          else if (io_depths_in_0 == 6'hB)
            hist_11 <= _hist_T;
          else
            hist_11 <= 6'h0;
          if (io_depths_in_7 == 6'hC)
            hist_12 <= _hist_T_14;
          else if (io_depths_in_6 == 6'hC)
            hist_12 <= _hist_T_12;
          else if (io_depths_in_5 == 6'hC)
            hist_12 <= _hist_T_10;
          else if (io_depths_in_4 == 6'hC)
            hist_12 <= _hist_T_8;
          else if (io_depths_in_3 == 6'hC)
            hist_12 <= _hist_T_6;
          else if (io_depths_in_2 == 6'hC)
            hist_12 <= _hist_T_4;
          else if (io_depths_in_1 == 6'hC)
            hist_12 <= _hist_T_2;
          else if (io_depths_in_0 == 6'hC)
            hist_12 <= _hist_T;
          else
            hist_12 <= 6'h0;
          if (io_depths_in_7 == 6'hD)
            hist_13 <= _hist_T_14;
          else if (io_depths_in_6 == 6'hD)
            hist_13 <= _hist_T_12;
          else if (io_depths_in_5 == 6'hD)
            hist_13 <= _hist_T_10;
          else if (io_depths_in_4 == 6'hD)
            hist_13 <= _hist_T_8;
          else if (io_depths_in_3 == 6'hD)
            hist_13 <= _hist_T_6;
          else if (io_depths_in_2 == 6'hD)
            hist_13 <= _hist_T_4;
          else if (io_depths_in_1 == 6'hD)
            hist_13 <= _hist_T_2;
          else if (io_depths_in_0 == 6'hD)
            hist_13 <= _hist_T;
          else
            hist_13 <= 6'h0;
          if (io_depths_in_7 == 6'hE)
            hist_14 <= _hist_T_14;
          else if (io_depths_in_6 == 6'hE)
            hist_14 <= _hist_T_12;
          else if (io_depths_in_5 == 6'hE)
            hist_14 <= _hist_T_10;
          else if (io_depths_in_4 == 6'hE)
            hist_14 <= _hist_T_8;
          else if (io_depths_in_3 == 6'hE)
            hist_14 <= _hist_T_6;
          else if (io_depths_in_2 == 6'hE)
            hist_14 <= _hist_T_4;
          else if (io_depths_in_1 == 6'hE)
            hist_14 <= _hist_T_2;
          else if (io_depths_in_0 == 6'hE)
            hist_14 <= _hist_T;
          else
            hist_14 <= 6'h0;
          if (io_depths_in_7 == 6'hF)
            hist_15 <= _hist_T_14;
          else if (io_depths_in_6 == 6'hF)
            hist_15 <= _hist_T_12;
          else if (io_depths_in_5 == 6'hF)
            hist_15 <= _hist_T_10;
          else if (io_depths_in_4 == 6'hF)
            hist_15 <= _hist_T_8;
          else if (io_depths_in_3 == 6'hF)
            hist_15 <= _hist_T_6;
          else if (io_depths_in_2 == 6'hF)
            hist_15 <= _hist_T_4;
          else if (io_depths_in_1 == 6'hF)
            hist_15 <= _hist_T_2;
          else if (io_depths_in_0 == 6'hF)
            hist_15 <= _hist_T;
          else
            hist_15 <= 6'h0;
          if (io_depths_in_7 == 6'h10)
            hist_16 <= _hist_T_14;
          else if (io_depths_in_6 == 6'h10)
            hist_16 <= _hist_T_12;
          else if (io_depths_in_5 == 6'h10)
            hist_16 <= _hist_T_10;
          else if (io_depths_in_4 == 6'h10)
            hist_16 <= _hist_T_8;
          else if (io_depths_in_3 == 6'h10)
            hist_16 <= _hist_T_6;
          else if (io_depths_in_2 == 6'h10)
            hist_16 <= _hist_T_4;
          else if (io_depths_in_1 == 6'h10)
            hist_16 <= _hist_T_2;
          else if (io_depths_in_0 == 6'h10)
            hist_16 <= _hist_T;
          else
            hist_16 <= 6'h0;
          if (io_depths_in_7 == 6'h11)
            hist_17 <= _hist_T_14;
          else if (io_depths_in_6 == 6'h11)
            hist_17 <= _hist_T_12;
          else if (io_depths_in_5 == 6'h11)
            hist_17 <= _hist_T_10;
          else if (io_depths_in_4 == 6'h11)
            hist_17 <= _hist_T_8;
          else if (io_depths_in_3 == 6'h11)
            hist_17 <= _hist_T_6;
          else if (io_depths_in_2 == 6'h11)
            hist_17 <= _hist_T_4;
          else if (io_depths_in_1 == 6'h11)
            hist_17 <= _hist_T_2;
          else if (io_depths_in_0 == 6'h11)
            hist_17 <= _hist_T;
          else
            hist_17 <= 6'h0;
          if (io_depths_in_7 == 6'h12)
            hist_18 <= _hist_T_14;
          else if (io_depths_in_6 == 6'h12)
            hist_18 <= _hist_T_12;
          else if (io_depths_in_5 == 6'h12)
            hist_18 <= _hist_T_10;
          else if (io_depths_in_4 == 6'h12)
            hist_18 <= _hist_T_8;
          else if (io_depths_in_3 == 6'h12)
            hist_18 <= _hist_T_6;
          else if (io_depths_in_2 == 6'h12)
            hist_18 <= _hist_T_4;
          else if (io_depths_in_1 == 6'h12)
            hist_18 <= _hist_T_2;
          else if (io_depths_in_0 == 6'h12)
            hist_18 <= _hist_T;
          else
            hist_18 <= 6'h0;
          if (io_depths_in_7 == 6'h13)
            hist_19 <= _hist_T_14;
          else if (io_depths_in_6 == 6'h13)
            hist_19 <= _hist_T_12;
          else if (io_depths_in_5 == 6'h13)
            hist_19 <= _hist_T_10;
          else if (io_depths_in_4 == 6'h13)
            hist_19 <= _hist_T_8;
          else if (io_depths_in_3 == 6'h13)
            hist_19 <= _hist_T_6;
          else if (io_depths_in_2 == 6'h13)
            hist_19 <= _hist_T_4;
          else if (io_depths_in_1 == 6'h13)
            hist_19 <= _hist_T_2;
          else if (io_depths_in_0 == 6'h13)
            hist_19 <= _hist_T;
          else
            hist_19 <= 6'h0;
          if (io_depths_in_7 == 6'h14)
            hist_20 <= _hist_T_14;
          else if (io_depths_in_6 == 6'h14)
            hist_20 <= _hist_T_12;
          else if (io_depths_in_5 == 6'h14)
            hist_20 <= _hist_T_10;
          else if (io_depths_in_4 == 6'h14)
            hist_20 <= _hist_T_8;
          else if (io_depths_in_3 == 6'h14)
            hist_20 <= _hist_T_6;
          else if (io_depths_in_2 == 6'h14)
            hist_20 <= _hist_T_4;
          else if (io_depths_in_1 == 6'h14)
            hist_20 <= _hist_T_2;
          else if (io_depths_in_0 == 6'h14)
            hist_20 <= _hist_T;
          else
            hist_20 <= 6'h0;
          if (io_depths_in_7 == 6'h15)
            hist_21 <= _hist_T_14;
          else if (io_depths_in_6 == 6'h15)
            hist_21 <= _hist_T_12;
          else if (io_depths_in_5 == 6'h15)
            hist_21 <= _hist_T_10;
          else if (io_depths_in_4 == 6'h15)
            hist_21 <= _hist_T_8;
          else if (io_depths_in_3 == 6'h15)
            hist_21 <= _hist_T_6;
          else if (io_depths_in_2 == 6'h15)
            hist_21 <= _hist_T_4;
          else if (io_depths_in_1 == 6'h15)
            hist_21 <= _hist_T_2;
          else if (io_depths_in_0 == 6'h15)
            hist_21 <= _hist_T;
          else
            hist_21 <= 6'h0;
          if (io_depths_in_7 == 6'h16)
            hist_22 <= _hist_T_14;
          else if (io_depths_in_6 == 6'h16)
            hist_22 <= _hist_T_12;
          else if (io_depths_in_5 == 6'h16)
            hist_22 <= _hist_T_10;
          else if (io_depths_in_4 == 6'h16)
            hist_22 <= _hist_T_8;
          else if (io_depths_in_3 == 6'h16)
            hist_22 <= _hist_T_6;
          else if (io_depths_in_2 == 6'h16)
            hist_22 <= _hist_T_4;
          else if (io_depths_in_1 == 6'h16)
            hist_22 <= _hist_T_2;
          else if (io_depths_in_0 == 6'h16)
            hist_22 <= _hist_T;
          else
            hist_22 <= 6'h0;
          if (io_depths_in_7 == 6'h17)
            hist_23 <= _hist_T_14;
          else if (io_depths_in_6 == 6'h17)
            hist_23 <= _hist_T_12;
          else if (io_depths_in_5 == 6'h17)
            hist_23 <= _hist_T_10;
          else if (io_depths_in_4 == 6'h17)
            hist_23 <= _hist_T_8;
          else if (io_depths_in_3 == 6'h17)
            hist_23 <= _hist_T_6;
          else if (io_depths_in_2 == 6'h17)
            hist_23 <= _hist_T_4;
          else if (io_depths_in_1 == 6'h17)
            hist_23 <= _hist_T_2;
          else if (io_depths_in_0 == 6'h17)
            hist_23 <= _hist_T;
          else
            hist_23 <= 6'h0;
          if (io_depths_in_7 == 6'h18)
            hist_24 <= _hist_T_14;
          else if (io_depths_in_6 == 6'h18)
            hist_24 <= _hist_T_12;
          else if (io_depths_in_5 == 6'h18)
            hist_24 <= _hist_T_10;
          else if (io_depths_in_4 == 6'h18)
            hist_24 <= _hist_T_8;
          else if (io_depths_in_3 == 6'h18)
            hist_24 <= _hist_T_6;
          else if (io_depths_in_2 == 6'h18)
            hist_24 <= _hist_T_4;
          else if (io_depths_in_1 == 6'h18)
            hist_24 <= _hist_T_2;
          else if (io_depths_in_0 == 6'h18)
            hist_24 <= _hist_T;
          else
            hist_24 <= 6'h0;
          if (io_depths_in_7 == 6'h19)
            hist_25 <= _hist_T_14;
          else if (io_depths_in_6 == 6'h19)
            hist_25 <= _hist_T_12;
          else if (io_depths_in_5 == 6'h19)
            hist_25 <= _hist_T_10;
          else if (io_depths_in_4 == 6'h19)
            hist_25 <= _hist_T_8;
          else if (io_depths_in_3 == 6'h19)
            hist_25 <= _hist_T_6;
          else if (io_depths_in_2 == 6'h19)
            hist_25 <= _hist_T_4;
          else if (io_depths_in_1 == 6'h19)
            hist_25 <= _hist_T_2;
          else if (io_depths_in_0 == 6'h19)
            hist_25 <= _hist_T;
          else
            hist_25 <= 6'h0;
          if (io_depths_in_7 == 6'h1A)
            hist_26 <= _hist_T_14;
          else if (io_depths_in_6 == 6'h1A)
            hist_26 <= _hist_T_12;
          else if (io_depths_in_5 == 6'h1A)
            hist_26 <= _hist_T_10;
          else if (io_depths_in_4 == 6'h1A)
            hist_26 <= _hist_T_8;
          else if (io_depths_in_3 == 6'h1A)
            hist_26 <= _hist_T_6;
          else if (io_depths_in_2 == 6'h1A)
            hist_26 <= _hist_T_4;
          else if (io_depths_in_1 == 6'h1A)
            hist_26 <= _hist_T_2;
          else if (io_depths_in_0 == 6'h1A)
            hist_26 <= _hist_T;
          else
            hist_26 <= 6'h0;
          if (io_depths_in_7 == 6'h1B)
            hist_27 <= _hist_T_14;
          else if (io_depths_in_6 == 6'h1B)
            hist_27 <= _hist_T_12;
          else if (io_depths_in_5 == 6'h1B)
            hist_27 <= _hist_T_10;
          else if (io_depths_in_4 == 6'h1B)
            hist_27 <= _hist_T_8;
          else if (io_depths_in_3 == 6'h1B)
            hist_27 <= _hist_T_6;
          else if (io_depths_in_2 == 6'h1B)
            hist_27 <= _hist_T_4;
          else if (io_depths_in_1 == 6'h1B)
            hist_27 <= _hist_T_2;
          else if (io_depths_in_0 == 6'h1B)
            hist_27 <= _hist_T;
          else
            hist_27 <= 6'h0;
          if (io_depths_in_7 == 6'h1C)
            hist_28 <= _hist_T_14;
          else if (io_depths_in_6 == 6'h1C)
            hist_28 <= _hist_T_12;
          else if (io_depths_in_5 == 6'h1C)
            hist_28 <= _hist_T_10;
          else if (io_depths_in_4 == 6'h1C)
            hist_28 <= _hist_T_8;
          else if (io_depths_in_3 == 6'h1C)
            hist_28 <= _hist_T_6;
          else if (io_depths_in_2 == 6'h1C)
            hist_28 <= _hist_T_4;
          else if (io_depths_in_1 == 6'h1C)
            hist_28 <= _hist_T_2;
          else if (io_depths_in_0 == 6'h1C)
            hist_28 <= _hist_T;
          else
            hist_28 <= 6'h0;
          if (io_depths_in_7 == 6'h1D)
            hist_29 <= _hist_T_14;
          else if (io_depths_in_6 == 6'h1D)
            hist_29 <= _hist_T_12;
          else if (io_depths_in_5 == 6'h1D)
            hist_29 <= _hist_T_10;
          else if (io_depths_in_4 == 6'h1D)
            hist_29 <= _hist_T_8;
          else if (io_depths_in_3 == 6'h1D)
            hist_29 <= _hist_T_6;
          else if (io_depths_in_2 == 6'h1D)
            hist_29 <= _hist_T_4;
          else if (io_depths_in_1 == 6'h1D)
            hist_29 <= _hist_T_2;
          else if (io_depths_in_0 == 6'h1D)
            hist_29 <= _hist_T;
          else
            hist_29 <= 6'h0;
          if (io_depths_in_7 == 6'h1E)
            hist_30 <= _hist_T_14;
          else if (io_depths_in_6 == 6'h1E)
            hist_30 <= _hist_T_12;
          else if (io_depths_in_5 == 6'h1E)
            hist_30 <= _hist_T_10;
          else if (io_depths_in_4 == 6'h1E)
            hist_30 <= _hist_T_8;
          else if (io_depths_in_3 == 6'h1E)
            hist_30 <= _hist_T_6;
          else if (io_depths_in_2 == 6'h1E)
            hist_30 <= _hist_T_4;
          else if (io_depths_in_1 == 6'h1E)
            hist_30 <= _hist_T_2;
          else if (io_depths_in_0 == 6'h1E)
            hist_30 <= _hist_T;
          else
            hist_30 <= 6'h0;
          if (io_depths_in_7 == 6'h1F)
            hist_31 <= _hist_T_14;
          else if (io_depths_in_6 == 6'h1F)
            hist_31 <= _hist_T_12;
          else if (io_depths_in_5 == 6'h1F)
            hist_31 <= _hist_T_10;
          else if (io_depths_in_4 == 6'h1F)
            hist_31 <= _hist_T_8;
          else if (io_depths_in_3 == 6'h1F)
            hist_31 <= _hist_T_6;
          else if (io_depths_in_2 == 6'h1F)
            hist_31 <= _hist_T_4;
          else if (io_depths_in_1 == 6'h1F)
            hist_31 <= _hist_T_2;
          else if (io_depths_in_0 == 6'h1F)
            hist_31 <= _hist_T;
          else
            hist_31 <= 6'h0;
          if (io_depths_in_7 == 6'h20)
            hist_32 <= _hist_T_14;
          else if (io_depths_in_6 == 6'h20)
            hist_32 <= _hist_T_12;
          else if (io_depths_in_5 == 6'h20)
            hist_32 <= _hist_T_10;
          else if (io_depths_in_4 == 6'h20)
            hist_32 <= _hist_T_8;
          else if (io_depths_in_3 == 6'h20)
            hist_32 <= _hist_T_6;
          else if (io_depths_in_2 == 6'h20)
            hist_32 <= _hist_T_4;
          else if (io_depths_in_1 == 6'h20)
            hist_32 <= _hist_T_2;
          else if (io_depths_in_0 == 6'h20)
            hist_32 <= _hist_T;
          else
            hist_32 <= 6'h0;
          migrated <= 6'h0;
        end
        else begin
          automatic logic       _GEN_12;
          automatic logic [5:0] _level_T;
          automatic logic [5:0] _hist_T_22;
          automatic logic [5:0] _hist_T_24;
          automatic logic [5:0] _hist_T_26;
          _GEN_12 = migrated < K & (|_canMigrate_T);
          _level_T =
            6'h20
            - {2'h0,
               (|hist_32)
                 ? 4'h0
                 : (|hist_31)
                     ? 4'h1
                     : (|hist_30)
                         ? 4'h2
                         : (|hist_29)
                             ? 4'h3
                             : (|hist_28)
                                 ? 4'h4
                                 : (|hist_27)
                                     ? 4'h5
                                     : (|hist_26)
                                         ? 4'h6
                                         : (|hist_25)
                                             ? 4'h7
                                             : (|hist_24)
                                                 ? 4'h8
                                                 : (|hist_23)
                                                     ? 4'h9
                                                     : (|hist_22)
                                                         ? 4'hA
                                                         : (|hist_21)
                                                             ? 4'hB
                                                             : (|hist_20)
                                                                 ? 4'hC
                                                                 : (|hist_19)
                                                                     ? 4'hD
                                                                     : {3'h7,
                                                                        ~(|hist_18)}};
          _hist_T_22 = _GEN_11[_level_T] - 6'h1;
          _hist_T_24 = _level_T - 6'h1;
          _hist_T_26 = _GEN_11[_hist_T_24] + 6'h2;
          if (_GEN_1) begin
            if (_GEN_12) begin
              automatic logic [13:0] selOH =
                (|hist_1)
                  ? 14'h0
                  : (|hist_2)
                      ? 14'h1
                      : (|hist_3)
                          ? 14'h2
                          : (|hist_4)
                              ? 14'h4
                              : (|hist_5)
                                  ? 14'h8
                                  : (|hist_6)
                                      ? 14'h10
                                      : (|hist_7)
                                          ? 14'h20
                                          : (|hist_8)
                                              ? 14'h40
                                              : (|hist_9)
                                                  ? 14'h80
                                                  : (|hist_10)
                                                      ? 14'h100
                                                      : (|hist_11)
                                                          ? 14'h200
                                                          : (|hist_12)
                                                              ? 14'h400
                                                              : (|hist_13)
                                                                  ? 14'h800
                                                                  : (|hist_14)
                                                                      ? 14'h1000
                                                                      : {|hist_15, 13'h0};
              automatic logic [6:0]  _sel_T_1 = {1'h0, selOH[13:8]} | selOH[6:0];
              automatic logic [2:0]  _sel_T_3 = _sel_T_1[6:4] | _sel_T_1[2:0];
              automatic logic        _sel_T_5 = _sel_T_3[2] | _sel_T_3[0];
              automatic logic [3:0]  _GEN_13 =
                {|(selOH[13:7]), |(_sel_T_1[6:3]), |(_sel_T_3[2:1]), _sel_T_5};
              automatic logic [3:0]  _sel_T_10;
              automatic logic [5:0]  _hist_T_16;
              automatic logic [5:0]  _hist_T_20;
              _sel_T_10 = _GEN_13 + 4'h1;
              _hist_T_16 = _GEN_11[{2'h0, _sel_T_10}] - 6'h1;
              _hist_T_20 =
                _GEN_11[{2'h0,
                         |(selOH[13:7]),
                         |(_sel_T_1[6:3]),
                         |(_sel_T_3[2:1]),
                         _sel_T_5}] + 6'h2;
              if (_GEN_13 == 4'h0)
                hist_0 <= _hist_T_20;
              else if (_sel_T_10 == 4'h0)
                hist_0 <= _hist_T_16;
              if (_GEN_13 == 4'h1)
                hist_1 <= _hist_T_20;
              else if (_sel_T_10 == 4'h1)
                hist_1 <= _hist_T_16;
              if (_GEN_13 == 4'h2)
                hist_2 <= _hist_T_20;
              else if (_sel_T_10 == 4'h2)
                hist_2 <= _hist_T_16;
              if (_GEN_13 == 4'h3)
                hist_3 <= _hist_T_20;
              else if (_sel_T_10 == 4'h3)
                hist_3 <= _hist_T_16;
              if (_GEN_13 == 4'h4)
                hist_4 <= _hist_T_20;
              else if (_sel_T_10 == 4'h4)
                hist_4 <= _hist_T_16;
              if (_GEN_13 == 4'h5)
                hist_5 <= _hist_T_20;
              else if (_sel_T_10 == 4'h5)
                hist_5 <= _hist_T_16;
              if (_GEN_13 == 4'h6)
                hist_6 <= _hist_T_20;
              else if (_sel_T_10 == 4'h6)
                hist_6 <= _hist_T_16;
              if (_GEN_13 == 4'h7)
                hist_7 <= _hist_T_20;
              else if (_sel_T_10 == 4'h7)
                hist_7 <= _hist_T_16;
              if (_GEN_13 == 4'h8)
                hist_8 <= _hist_T_20;
              else if (_sel_T_10 == 4'h8)
                hist_8 <= _hist_T_16;
              if (_GEN_13 == 4'h9)
                hist_9 <= _hist_T_20;
              else if (_sel_T_10 == 4'h9)
                hist_9 <= _hist_T_16;
              if (_GEN_13 == 4'hA)
                hist_10 <= _hist_T_20;
              else if (_sel_T_10 == 4'hA)
                hist_10 <= _hist_T_16;
              if (_GEN_13 == 4'hB)
                hist_11 <= _hist_T_20;
              else if (_sel_T_10 == 4'hB)
                hist_11 <= _hist_T_16;
              if (_GEN_13 == 4'hC)
                hist_12 <= _hist_T_20;
              else if (_sel_T_10 == 4'hC)
                hist_12 <= _hist_T_16;
              if (_GEN_13 == 4'hD)
                hist_13 <= _hist_T_20;
              else if (_sel_T_10 == 4'hD)
                hist_13 <= _hist_T_16;
              if (_GEN_13 == 4'hE)
                hist_14 <= _hist_T_20;
              else if (_sel_T_10 == 4'hE)
                hist_14 <= _hist_T_16;
              if (&_GEN_13)
                hist_15 <= _hist_T_20;
              else if (&_sel_T_10)
                hist_15 <= _hist_T_16;
              hist_16 <= hist_16 + 6'h1;
            end
          end
          else if (_GEN_5) begin
            if (_hist_T_24 == 6'h0)
              hist_0 <= _hist_T_26;
            else if (_level_T == 6'h0)
              hist_0 <= _hist_T_22;
            if (_hist_T_24 == 6'h1)
              hist_1 <= _hist_T_26;
            else if (_level_T == 6'h1)
              hist_1 <= _hist_T_22;
            if (_hist_T_24 == 6'h2)
              hist_2 <= _hist_T_26;
            else if (_level_T == 6'h2)
              hist_2 <= _hist_T_22;
            if (_hist_T_24 == 6'h3)
              hist_3 <= _hist_T_26;
            else if (_level_T == 6'h3)
              hist_3 <= _hist_T_22;
            if (_hist_T_24 == 6'h4)
              hist_4 <= _hist_T_26;
            else if (_level_T == 6'h4)
              hist_4 <= _hist_T_22;
            if (_hist_T_24 == 6'h5)
              hist_5 <= _hist_T_26;
            else if (_level_T == 6'h5)
              hist_5 <= _hist_T_22;
            if (_hist_T_24 == 6'h6)
              hist_6 <= _hist_T_26;
            else if (_level_T == 6'h6)
              hist_6 <= _hist_T_22;
            if (_hist_T_24 == 6'h7)
              hist_7 <= _hist_T_26;
            else if (_level_T == 6'h7)
              hist_7 <= _hist_T_22;
            if (_hist_T_24 == 6'h8)
              hist_8 <= _hist_T_26;
            else if (_level_T == 6'h8)
              hist_8 <= _hist_T_22;
            if (_hist_T_24 == 6'h9)
              hist_9 <= _hist_T_26;
            else if (_level_T == 6'h9)
              hist_9 <= _hist_T_22;
            if (_hist_T_24 == 6'hA)
              hist_10 <= _hist_T_26;
            else if (_level_T == 6'hA)
              hist_10 <= _hist_T_22;
            if (_hist_T_24 == 6'hB)
              hist_11 <= _hist_T_26;
            else if (_level_T == 6'hB)
              hist_11 <= _hist_T_22;
            if (_hist_T_24 == 6'hC)
              hist_12 <= _hist_T_26;
            else if (_level_T == 6'hC)
              hist_12 <= _hist_T_22;
            if (_hist_T_24 == 6'hD)
              hist_13 <= _hist_T_26;
            else if (_level_T == 6'hD)
              hist_13 <= _hist_T_22;
            if (_hist_T_24 == 6'hE)
              hist_14 <= _hist_T_26;
            else if (_level_T == 6'hE)
              hist_14 <= _hist_T_22;
            if (_hist_T_24 == 6'hF)
              hist_15 <= _hist_T_26;
            else if (_level_T == 6'hF)
              hist_15 <= _hist_T_22;
            if (_hist_T_24 == 6'h10)
              hist_16 <= _hist_T_26;
            else
              hist_16 <= hist_16 + 6'h1;
          end
          if (_GEN_1 | ~_GEN_5) begin
          end
          else begin
            if (_hist_T_24 == 6'h11)
              hist_17 <= _hist_T_26;
            else if (_level_T == 6'h11)
              hist_17 <= _hist_T_22;
            if (_hist_T_24 == 6'h12)
              hist_18 <= _hist_T_26;
            else if (_level_T == 6'h12)
              hist_18 <= _hist_T_22;
            if (_hist_T_24 == 6'h13)
              hist_19 <= _hist_T_26;
            else if (_level_T == 6'h13)
              hist_19 <= _hist_T_22;
            if (_hist_T_24 == 6'h14)
              hist_20 <= _hist_T_26;
            else if (_level_T == 6'h14)
              hist_20 <= _hist_T_22;
            if (_hist_T_24 == 6'h15)
              hist_21 <= _hist_T_26;
            else if (_level_T == 6'h15)
              hist_21 <= _hist_T_22;
            if (_hist_T_24 == 6'h16)
              hist_22 <= _hist_T_26;
            else if (_level_T == 6'h16)
              hist_22 <= _hist_T_22;
            if (_hist_T_24 == 6'h17)
              hist_23 <= _hist_T_26;
            else if (_level_T == 6'h17)
              hist_23 <= _hist_T_22;
            if (_hist_T_24 == 6'h18)
              hist_24 <= _hist_T_26;
            else if (_level_T == 6'h18)
              hist_24 <= _hist_T_22;
            if (_hist_T_24 == 6'h19)
              hist_25 <= _hist_T_26;
            else if (_level_T == 6'h19)
              hist_25 <= _hist_T_22;
            if (_hist_T_24 == 6'h1A)
              hist_26 <= _hist_T_26;
            else if (_level_T == 6'h1A)
              hist_26 <= _hist_T_22;
            if (_hist_T_24 == 6'h1B)
              hist_27 <= _hist_T_26;
            else if (_level_T == 6'h1B)
              hist_27 <= _hist_T_22;
            if (_hist_T_24 == 6'h1C)
              hist_28 <= _hist_T_26;
            else if (_level_T == 6'h1C)
              hist_28 <= _hist_T_22;
            if (_hist_T_24 == 6'h1D)
              hist_29 <= _hist_T_26;
            else if (_level_T == 6'h1D)
              hist_29 <= _hist_T_22;
            if (_hist_T_24 == 6'h1E)
              hist_30 <= _hist_T_26;
            else if (_level_T == 6'h1E)
              hist_30 <= _hist_T_22;
            if (_hist_T_24 == 6'h1F)
              hist_31 <= _hist_T_26;
            else if (_level_T == 6'h1F)
              hist_31 <= _hist_T_22;
            if (_hist_T_24 == 6'h20)
              hist_32 <= _hist_T_26;
            else if (_level_T == 6'h20)
              hist_32 <= _hist_T_22;
          end
          if (_GEN_1 & _GEN_12)
            migrated <= migrated + 6'h1;
        end
      end
      if (~_GEN_9) begin
        if (_GEN_3) begin
          if (~_GEN_4)
            assignPtr <= 6'h0;
        end
        else if (_GEN_6 & _GEN_7)
          assignPtr <= assignPtr + 6'h1;
      end
      _GEN_10 =
        {{state},
         {state},
         {3'h0},
         {_GEN_7 ? state : 3'h5},
         {_GEN_4 ? state : 3'h4},
         {_GEN_2 ? 3'h3 : state},
         {3'h2},
         {state}};
      state <= _GEN_10[state];
    end
    if (_GEN | ~_GEN_0) begin
    end
    else begin
      automatic logic [5:0] _sumHigh_T_128 =
        hist_17 + hist_18 + hist_19 + hist_20 + hist_21 + hist_22 + hist_23 + hist_24
        + hist_25 + hist_26 + hist_27 + hist_28 + hist_29 + hist_30 + hist_31 + hist_32;
      K <= {1'h0, _sumHigh_T_128[5:1]};
    end
    if (~(_GEN | _GEN_0)) begin
      if (_GEN_1) begin
        if (_GEN_2)
          holesLeft <= 6'h0 - hist_16;
      end
      else if (_GEN_5)
        holesLeft <= holesLeft - 6'h1;
    end
    if (_GEN_8 | ~(_GEN_6 & _GEN_7 & assignPtr[2:0] == 3'h0)) begin
    end
    else
      outDepth_0 <= sel_1;
    if (_GEN_8 | ~(_GEN_6 & _GEN_7 & assignPtr[2:0] == 3'h1)) begin
    end
    else
      outDepth_1 <= sel_1;
    if (_GEN_8 | ~(_GEN_6 & _GEN_7 & assignPtr[2:0] == 3'h2)) begin
    end
    else
      outDepth_2 <= sel_1;
    if (_GEN_8 | ~(_GEN_6 & _GEN_7 & assignPtr[2:0] == 3'h3)) begin
    end
    else
      outDepth_3 <= sel_1;
    if (_GEN_8 | ~(_GEN_6 & _GEN_7 & assignPtr[2:0] == 3'h4)) begin
    end
    else
      outDepth_4 <= sel_1;
    if (_GEN_8 | ~(_GEN_6 & _GEN_7 & assignPtr[2:0] == 3'h5)) begin
    end
    else
      outDepth_5 <= sel_1;
    if (_GEN_8 | ~(_GEN_6 & _GEN_7 & assignPtr[2:0] == 3'h6)) begin
    end
    else
      outDepth_6 <= sel_1;
    if (_GEN_8 | ~(_GEN_6 & _GEN_7 & (&(assignPtr[2:0])))) begin
    end
    else
      outDepth_7 <= sel_1;
    if (~_GEN_9) begin
      if (_GEN_3) begin
        if (~_GEN_4) begin
          cnts_0 <= hist_0;
          cnts_1 <= hist_1;
          cnts_2 <= hist_2;
          cnts_3 <= hist_3;
          cnts_4 <= hist_4;
          cnts_5 <= hist_5;
          cnts_6 <= hist_6;
          cnts_7 <= hist_7;
          cnts_8 <= hist_8;
          cnts_9 <= hist_9;
          cnts_10 <= hist_10;
          cnts_11 <= hist_11;
          cnts_12 <= hist_12;
          cnts_13 <= hist_13;
          cnts_14 <= hist_14;
          cnts_15 <= hist_15;
          cnts_16 <= hist_16;
          cnts_17 <= hist_17;
          cnts_18 <= hist_18;
          cnts_19 <= hist_19;
          cnts_20 <= hist_20;
          cnts_21 <= hist_21;
          cnts_22 <= hist_22;
          cnts_23 <= hist_23;
          cnts_24 <= hist_24;
          cnts_25 <= hist_25;
          cnts_26 <= hist_26;
          cnts_27 <= hist_27;
          cnts_28 <= hist_28;
          cnts_29 <= hist_29;
          cnts_30 <= hist_30;
          cnts_31 <= hist_31;
          cnts_32 <= hist_32;
        end
      end
      else begin
        automatic logic [63:0][5:0] _GEN_14 =
          {{cnts_0},
           {cnts_0},
           {cnts_0},
           {cnts_0},
           {cnts_0},
           {cnts_0},
           {cnts_0},
           {cnts_0},
           {cnts_0},
           {cnts_0},
           {cnts_0},
           {cnts_0},
           {cnts_0},
           {cnts_0},
           {cnts_0},
           {cnts_0},
           {cnts_0},
           {cnts_0},
           {cnts_0},
           {cnts_0},
           {cnts_0},
           {cnts_0},
           {cnts_0},
           {cnts_0},
           {cnts_0},
           {cnts_0},
           {cnts_0},
           {cnts_0},
           {cnts_0},
           {cnts_0},
           {cnts_0},
           {cnts_32},
           {cnts_31},
           {cnts_30},
           {cnts_29},
           {cnts_28},
           {cnts_27},
           {cnts_26},
           {cnts_25},
           {cnts_24},
           {cnts_23},
           {cnts_22},
           {cnts_21},
           {cnts_20},
           {cnts_19},
           {cnts_18},
           {cnts_17},
           {cnts_16},
           {cnts_15},
           {cnts_14},
           {cnts_13},
           {cnts_12},
           {cnts_11},
           {cnts_10},
           {cnts_9},
           {cnts_8},
           {cnts_7},
           {cnts_6},
           {cnts_5},
           {cnts_4},
           {cnts_3},
           {cnts_2},
           {cnts_1},
           {cnts_0}};
        automatic logic [5:0]       _cnts_T;
        _cnts_T = _GEN_14[sel_1] - 6'h1;
        if (_GEN_6 & _GEN_7 & sel_1 == 6'h0)
          cnts_0 <= _cnts_T;
        if (_GEN_6 & _GEN_7 & sel_1 == 6'h1)
          cnts_1 <= _cnts_T;
        if (_GEN_6 & _GEN_7 & sel_1 == 6'h2)
          cnts_2 <= _cnts_T;
        if (_GEN_6 & _GEN_7 & sel_1 == 6'h3)
          cnts_3 <= _cnts_T;
        if (_GEN_6 & _GEN_7 & sel_1 == 6'h4)
          cnts_4 <= _cnts_T;
        if (_GEN_6 & _GEN_7 & sel_1 == 6'h5)
          cnts_5 <= _cnts_T;
        if (_GEN_6 & _GEN_7 & sel_1 == 6'h6)
          cnts_6 <= _cnts_T;
        if (_GEN_6 & _GEN_7 & sel_1 == 6'h7)
          cnts_7 <= _cnts_T;
        if (_GEN_6 & _GEN_7 & sel_1 == 6'h8)
          cnts_8 <= _cnts_T;
        if (_GEN_6 & _GEN_7 & sel_1 == 6'h9)
          cnts_9 <= _cnts_T;
        if (_GEN_6 & _GEN_7 & sel_1 == 6'hA)
          cnts_10 <= _cnts_T;
        if (_GEN_6 & _GEN_7 & sel_1 == 6'hB)
          cnts_11 <= _cnts_T;
        if (_GEN_6 & _GEN_7 & sel_1 == 6'hC)
          cnts_12 <= _cnts_T;
        if (_GEN_6 & _GEN_7 & sel_1 == 6'hD)
          cnts_13 <= _cnts_T;
        if (_GEN_6 & _GEN_7 & sel_1 == 6'hE)
          cnts_14 <= _cnts_T;
        if (_GEN_6 & _GEN_7 & sel_1 == 6'hF)
          cnts_15 <= _cnts_T;
        if (_GEN_6 & _GEN_7 & sel_1 == 6'h10)
          cnts_16 <= _cnts_T;
        if (_GEN_6 & _GEN_7 & sel_1 == 6'h11)
          cnts_17 <= _cnts_T;
        if (_GEN_6 & _GEN_7 & sel_1 == 6'h12)
          cnts_18 <= _cnts_T;
        if (_GEN_6 & _GEN_7 & sel_1 == 6'h13)
          cnts_19 <= _cnts_T;
        if (_GEN_6 & _GEN_7 & sel_1 == 6'h14)
          cnts_20 <= _cnts_T;
        if (_GEN_6 & _GEN_7 & sel_1 == 6'h15)
          cnts_21 <= _cnts_T;
        if (_GEN_6 & _GEN_7 & sel_1 == 6'h16)
          cnts_22 <= _cnts_T;
        if (_GEN_6 & _GEN_7 & sel_1 == 6'h17)
          cnts_23 <= _cnts_T;
        if (_GEN_6 & _GEN_7 & sel_1 == 6'h18)
          cnts_24 <= _cnts_T;
        if (_GEN_6 & _GEN_7 & sel_1 == 6'h19)
          cnts_25 <= _cnts_T;
        if (_GEN_6 & _GEN_7 & sel_1 == 6'h1A)
          cnts_26 <= _cnts_T;
        if (_GEN_6 & _GEN_7 & sel_1 == 6'h1B)
          cnts_27 <= _cnts_T;
        if (_GEN_6 & _GEN_7 & sel_1 == 6'h1C)
          cnts_28 <= _cnts_T;
        if (_GEN_6 & _GEN_7 & sel_1 == 6'h1D)
          cnts_29 <= _cnts_T;
        if (_GEN_6 & _GEN_7 & sel_1 == 6'h1E)
          cnts_30 <= _cnts_T;
        if (_GEN_6 & _GEN_7 & sel_1 == 6'h1F)
          cnts_31 <= _cnts_T;
        if (_GEN_6 & _GEN_7 & sel_1 == 6'h20)
          cnts_32 <= _cnts_T;
      end
    end
  end // always @(posedge)
  assign io_depths_out_0 = outDepth_0;
  assign io_depths_out_1 = outDepth_1;
  assign io_depths_out_2 = outDepth_2;
  assign io_depths_out_3 = outDepth_3;
  assign io_depths_out_4 = outDepth_4;
  assign io_depths_out_5 = outDepth_5;
  assign io_depths_out_6 = outDepth_6;
  assign io_depths_out_7 = outDepth_7;
  assign io_done = state == 3'h5;
endmodule

module EntropyAwareTreeBuilder(
  input         clock,
                reset,
  input  [31:0] io_freq_in_0,
                io_freq_in_1,
                io_freq_in_2,
                io_freq_in_3,
                io_freq_in_4,
                io_freq_in_5,
                io_freq_in_6,
                io_freq_in_7,
  input         io_flush,
  output        io_done,
  output [15:0] io_code_out_0,
                io_code_out_1,
                io_code_out_2,
                io_code_out_3,
                io_code_out_4,
                io_code_out_5,
                io_code_out_6,
                io_code_out_7,
  output [5:0]  io_length_out_0,
                io_length_out_1,
                io_length_out_2,
                io_length_out_3,
                io_length_out_4,
                io_length_out_5,
                io_length_out_6,
                io_length_out_7
);

  wire [5:0]  _adjust_io_depths_out_0;
  wire [5:0]  _adjust_io_depths_out_1;
  wire [5:0]  _adjust_io_depths_out_2;
  wire [5:0]  _adjust_io_depths_out_3;
  wire [5:0]  _adjust_io_depths_out_4;
  wire [5:0]  _adjust_io_depths_out_5;
  wire [5:0]  _adjust_io_depths_out_6;
  wire [5:0]  _adjust_io_depths_out_7;
  wire        _adjust_io_done;
  wire        _builder_io_done;
  wire [3:0]  _builder_io_depths_0;
  wire [3:0]  _builder_io_depths_1;
  wire [3:0]  _builder_io_depths_2;
  wire [3:0]  _builder_io_depths_3;
  wire [3:0]  _builder_io_depths_4;
  wire [3:0]  _builder_io_depths_5;
  wire [3:0]  _builder_io_depths_6;
  wire [3:0]  _builder_io_depths_7;
  reg  [31:0] filtered_0;
  reg  [31:0] filtered_1;
  reg  [31:0] filtered_2;
  reg  [31:0] filtered_3;
  reg  [31:0] filtered_4;
  reg  [31:0] filtered_5;
  reg  [31:0] filtered_6;
  reg  [31:0] filtered_7;
  reg  [5:0]  depthsIn_0;
  reg  [5:0]  depthsIn_1;
  reg  [5:0]  depthsIn_2;
  reg  [5:0]  depthsIn_3;
  reg  [5:0]  depthsIn_4;
  reg  [5:0]  depthsIn_5;
  reg  [5:0]  depthsIn_6;
  reg  [5:0]  depthsIn_7;
  reg  [5:0]  depthsInReg_0;
  reg  [5:0]  depthsInReg_1;
  reg  [5:0]  depthsInReg_2;
  reg  [5:0]  depthsInReg_3;
  reg  [5:0]  depthsInReg_4;
  reg  [5:0]  depthsInReg_5;
  reg  [5:0]  depthsInReg_6;
  reg  [5:0]  depthsInReg_7;
  reg  [15:0] codes_0;
  reg  [15:0] codes_1;
  reg  [15:0] codes_2;
  reg  [15:0] codes_3;
  reg  [15:0] codes_4;
  reg  [15:0] codes_5;
  reg  [15:0] codes_6;
  reg  [15:0] codes_7;
  reg  [5:0]  lengths_0;
  reg  [5:0]  lengths_1;
  reg  [5:0]  lengths_2;
  reg  [5:0]  lengths_3;
  reg  [5:0]  lengths_4;
  reg  [5:0]  lengths_5;
  reg  [5:0]  lengths_6;
  reg  [5:0]  lengths_7;
  reg  [5:0]  countReg_0;
  reg  [5:0]  countReg_1;
  reg  [5:0]  countReg_2;
  reg  [5:0]  countReg_3;
  reg  [5:0]  countReg_4;
  reg  [5:0]  countReg_5;
  reg  [5:0]  countReg_6;
  reg  [5:0]  countReg_7;
  reg  [5:0]  countReg_8;
  reg  [5:0]  countReg_9;
  reg  [5:0]  countReg_10;
  reg  [5:0]  countReg_11;
  reg  [5:0]  countReg_12;
  reg  [5:0]  countReg_13;
  reg  [5:0]  countReg_14;
  reg  [5:0]  countReg_15;
  reg  [5:0]  countReg_16;
  reg  [15:0] codeStartReg_1;
  reg  [15:0] codeStartReg_2;
  reg  [15:0] codeStartReg_3;
  reg  [15:0] codeStartReg_4;
  reg  [15:0] codeStartReg_5;
  reg  [15:0] codeStartReg_6;
  reg  [15:0] codeStartReg_7;
  reg  [15:0] codeStartReg_8;
  reg  [15:0] codeStartReg_9;
  reg  [15:0] codeStartReg_10;
  reg  [15:0] codeStartReg_11;
  reg  [15:0] codeStartReg_12;
  reg  [15:0] codeStartReg_13;
  reg  [15:0] codeStartReg_14;
  reg  [15:0] codeStartReg_15;
  reg  [15:0] codeStartReg_16;
  reg  [2:0]  state;
  always @(posedge clock) begin
    automatic logic        _GEN = state == 3'h0;
    automatic logic        _GEN_0 = state == 3'h1;
    automatic logic        _GEN_1;
    automatic logic        _GEN_2;
    automatic logic        _GEN_3 = state == 3'h4;
    automatic logic        _GEN_4;
    automatic logic [5:0]  count_0;
    automatic logic [5:0]  count_1;
    automatic logic [5:0]  count_2;
    automatic logic [5:0]  count_3;
    automatic logic [5:0]  count_4;
    automatic logic [5:0]  count_5;
    automatic logic [5:0]  count_6;
    automatic logic [5:0]  count_7;
    automatic logic [5:0]  count_8;
    automatic logic [5:0]  count_9;
    automatic logic [5:0]  count_10;
    automatic logic [5:0]  count_11;
    automatic logic [5:0]  count_12;
    automatic logic [5:0]  count_13;
    automatic logic [5:0]  count_14;
    automatic logic [5:0]  count_15;
    automatic logic [15:0] codeStart_1;
    automatic logic [15:0] codeStart_2;
    automatic logic [15:0] codeStart_3;
    automatic logic [15:0] codeStart_4;
    automatic logic [15:0] codeStart_5;
    automatic logic [15:0] codeStart_6;
    automatic logic [15:0] codeStart_7;
    automatic logic [15:0] codeStart_8;
    automatic logic [15:0] codeStart_9;
    automatic logic [15:0] codeStart_10;
    automatic logic [15:0] codeStart_11;
    automatic logic [15:0] codeStart_12;
    automatic logic [15:0] codeStart_13;
    automatic logic [15:0] codeStart_14;
    automatic logic [15:0] codeStart_15;
    _GEN_1 = state == 3'h2;
    _GEN_2 = state == 3'h3;
    _GEN_4 = _GEN | _GEN_0 | _GEN_1 | _GEN_2 | ~_GEN_3;
    count_0 =
      _GEN_4
        ? 6'h0
        : {1'h0,
           {1'h0,
            {1'h0,
             {1'h0, {1'h0, depthsInReg_0 == 6'h0} + {1'h0, depthsInReg_1 == 6'h0}}
               + {2'h0, depthsInReg_2 == 6'h0}} + {3'h0, depthsInReg_3 == 6'h0}}
             + {4'h0, depthsInReg_4 == 6'h0}} + {5'h0, depthsInReg_5 == 6'h0}
          + {5'h0, depthsInReg_6 == 6'h0} + {5'h0, depthsInReg_7 == 6'h0};
    count_1 =
      _GEN_4
        ? 6'h0
        : {1'h0,
           {1'h0,
            {1'h0,
             {1'h0, {1'h0, depthsInReg_0 == 6'h1} + {1'h0, depthsInReg_1 == 6'h1}}
               + {2'h0, depthsInReg_2 == 6'h1}} + {3'h0, depthsInReg_3 == 6'h1}}
             + {4'h0, depthsInReg_4 == 6'h1}} + {5'h0, depthsInReg_5 == 6'h1}
          + {5'h0, depthsInReg_6 == 6'h1} + {5'h0, depthsInReg_7 == 6'h1};
    count_2 =
      _GEN_4
        ? 6'h0
        : {1'h0,
           {1'h0,
            {1'h0,
             {1'h0, {1'h0, depthsInReg_0 == 6'h2} + {1'h0, depthsInReg_1 == 6'h2}}
               + {2'h0, depthsInReg_2 == 6'h2}} + {3'h0, depthsInReg_3 == 6'h2}}
             + {4'h0, depthsInReg_4 == 6'h2}} + {5'h0, depthsInReg_5 == 6'h2}
          + {5'h0, depthsInReg_6 == 6'h2} + {5'h0, depthsInReg_7 == 6'h2};
    count_3 =
      _GEN_4
        ? 6'h0
        : {1'h0,
           {1'h0,
            {1'h0,
             {1'h0, {1'h0, depthsInReg_0 == 6'h3} + {1'h0, depthsInReg_1 == 6'h3}}
               + {2'h0, depthsInReg_2 == 6'h3}} + {3'h0, depthsInReg_3 == 6'h3}}
             + {4'h0, depthsInReg_4 == 6'h3}} + {5'h0, depthsInReg_5 == 6'h3}
          + {5'h0, depthsInReg_6 == 6'h3} + {5'h0, depthsInReg_7 == 6'h3};
    count_4 =
      _GEN_4
        ? 6'h0
        : {1'h0,
           {1'h0,
            {1'h0,
             {1'h0, {1'h0, depthsInReg_0 == 6'h4} + {1'h0, depthsInReg_1 == 6'h4}}
               + {2'h0, depthsInReg_2 == 6'h4}} + {3'h0, depthsInReg_3 == 6'h4}}
             + {4'h0, depthsInReg_4 == 6'h4}} + {5'h0, depthsInReg_5 == 6'h4}
          + {5'h0, depthsInReg_6 == 6'h4} + {5'h0, depthsInReg_7 == 6'h4};
    count_5 =
      _GEN_4
        ? 6'h0
        : {1'h0,
           {1'h0,
            {1'h0,
             {1'h0, {1'h0, depthsInReg_0 == 6'h5} + {1'h0, depthsInReg_1 == 6'h5}}
               + {2'h0, depthsInReg_2 == 6'h5}} + {3'h0, depthsInReg_3 == 6'h5}}
             + {4'h0, depthsInReg_4 == 6'h5}} + {5'h0, depthsInReg_5 == 6'h5}
          + {5'h0, depthsInReg_6 == 6'h5} + {5'h0, depthsInReg_7 == 6'h5};
    count_6 =
      _GEN_4
        ? 6'h0
        : {1'h0,
           {1'h0,
            {1'h0,
             {1'h0, {1'h0, depthsInReg_0 == 6'h6} + {1'h0, depthsInReg_1 == 6'h6}}
               + {2'h0, depthsInReg_2 == 6'h6}} + {3'h0, depthsInReg_3 == 6'h6}}
             + {4'h0, depthsInReg_4 == 6'h6}} + {5'h0, depthsInReg_5 == 6'h6}
          + {5'h0, depthsInReg_6 == 6'h6} + {5'h0, depthsInReg_7 == 6'h6};
    count_7 =
      _GEN_4
        ? 6'h0
        : {1'h0,
           {1'h0,
            {1'h0,
             {1'h0, {1'h0, depthsInReg_0 == 6'h7} + {1'h0, depthsInReg_1 == 6'h7}}
               + {2'h0, depthsInReg_2 == 6'h7}} + {3'h0, depthsInReg_3 == 6'h7}}
             + {4'h0, depthsInReg_4 == 6'h7}} + {5'h0, depthsInReg_5 == 6'h7}
          + {5'h0, depthsInReg_6 == 6'h7} + {5'h0, depthsInReg_7 == 6'h7};
    count_8 =
      _GEN_4
        ? 6'h0
        : {1'h0,
           {1'h0,
            {1'h0,
             {1'h0, {1'h0, depthsInReg_0 == 6'h8} + {1'h0, depthsInReg_1 == 6'h8}}
               + {2'h0, depthsInReg_2 == 6'h8}} + {3'h0, depthsInReg_3 == 6'h8}}
             + {4'h0, depthsInReg_4 == 6'h8}} + {5'h0, depthsInReg_5 == 6'h8}
          + {5'h0, depthsInReg_6 == 6'h8} + {5'h0, depthsInReg_7 == 6'h8};
    count_9 =
      _GEN_4
        ? 6'h0
        : {1'h0,
           {1'h0,
            {1'h0,
             {1'h0, {1'h0, depthsInReg_0 == 6'h9} + {1'h0, depthsInReg_1 == 6'h9}}
               + {2'h0, depthsInReg_2 == 6'h9}} + {3'h0, depthsInReg_3 == 6'h9}}
             + {4'h0, depthsInReg_4 == 6'h9}} + {5'h0, depthsInReg_5 == 6'h9}
          + {5'h0, depthsInReg_6 == 6'h9} + {5'h0, depthsInReg_7 == 6'h9};
    count_10 =
      _GEN_4
        ? 6'h0
        : {1'h0,
           {1'h0,
            {1'h0,
             {1'h0, {1'h0, depthsInReg_0 == 6'hA} + {1'h0, depthsInReg_1 == 6'hA}}
               + {2'h0, depthsInReg_2 == 6'hA}} + {3'h0, depthsInReg_3 == 6'hA}}
             + {4'h0, depthsInReg_4 == 6'hA}} + {5'h0, depthsInReg_5 == 6'hA}
          + {5'h0, depthsInReg_6 == 6'hA} + {5'h0, depthsInReg_7 == 6'hA};
    count_11 =
      _GEN_4
        ? 6'h0
        : {1'h0,
           {1'h0,
            {1'h0,
             {1'h0, {1'h0, depthsInReg_0 == 6'hB} + {1'h0, depthsInReg_1 == 6'hB}}
               + {2'h0, depthsInReg_2 == 6'hB}} + {3'h0, depthsInReg_3 == 6'hB}}
             + {4'h0, depthsInReg_4 == 6'hB}} + {5'h0, depthsInReg_5 == 6'hB}
          + {5'h0, depthsInReg_6 == 6'hB} + {5'h0, depthsInReg_7 == 6'hB};
    count_12 =
      _GEN_4
        ? 6'h0
        : {1'h0,
           {1'h0,
            {1'h0,
             {1'h0, {1'h0, depthsInReg_0 == 6'hC} + {1'h0, depthsInReg_1 == 6'hC}}
               + {2'h0, depthsInReg_2 == 6'hC}} + {3'h0, depthsInReg_3 == 6'hC}}
             + {4'h0, depthsInReg_4 == 6'hC}} + {5'h0, depthsInReg_5 == 6'hC}
          + {5'h0, depthsInReg_6 == 6'hC} + {5'h0, depthsInReg_7 == 6'hC};
    count_13 =
      _GEN_4
        ? 6'h0
        : {1'h0,
           {1'h0,
            {1'h0,
             {1'h0, {1'h0, depthsInReg_0 == 6'hD} + {1'h0, depthsInReg_1 == 6'hD}}
               + {2'h0, depthsInReg_2 == 6'hD}} + {3'h0, depthsInReg_3 == 6'hD}}
             + {4'h0, depthsInReg_4 == 6'hD}} + {5'h0, depthsInReg_5 == 6'hD}
          + {5'h0, depthsInReg_6 == 6'hD} + {5'h0, depthsInReg_7 == 6'hD};
    count_14 =
      _GEN_4
        ? 6'h0
        : {1'h0,
           {1'h0,
            {1'h0,
             {1'h0, {1'h0, depthsInReg_0 == 6'hE} + {1'h0, depthsInReg_1 == 6'hE}}
               + {2'h0, depthsInReg_2 == 6'hE}} + {3'h0, depthsInReg_3 == 6'hE}}
             + {4'h0, depthsInReg_4 == 6'hE}} + {5'h0, depthsInReg_5 == 6'hE}
          + {5'h0, depthsInReg_6 == 6'hE} + {5'h0, depthsInReg_7 == 6'hE};
    count_15 =
      _GEN_4
        ? 6'h0
        : {1'h0,
           {1'h0,
            {1'h0,
             {1'h0, {1'h0, depthsInReg_0 == 6'hF} + {1'h0, depthsInReg_1 == 6'hF}}
               + {2'h0, depthsInReg_2 == 6'hF}} + {3'h0, depthsInReg_3 == 6'hF}}
             + {4'h0, depthsInReg_4 == 6'hF}} + {5'h0, depthsInReg_5 == 6'hF}
          + {5'h0, depthsInReg_6 == 6'hF} + {5'h0, depthsInReg_7 == 6'hF};
    codeStart_1 = _GEN_4 ? 16'h0 : {9'h0, count_0, 1'h0};
    codeStart_2 = _GEN_4 ? 16'h0 : {codeStart_1[14:0] + {9'h0, count_1}, 1'h0};
    codeStart_3 = _GEN_4 ? 16'h0 : {codeStart_2[14:0] + {9'h0, count_2}, 1'h0};
    codeStart_4 = _GEN_4 ? 16'h0 : {codeStart_3[14:0] + {9'h0, count_3}, 1'h0};
    codeStart_5 = _GEN_4 ? 16'h0 : {codeStart_4[14:0] + {9'h0, count_4}, 1'h0};
    codeStart_6 = _GEN_4 ? 16'h0 : {codeStart_5[14:0] + {9'h0, count_5}, 1'h0};
    codeStart_7 = _GEN_4 ? 16'h0 : {codeStart_6[14:0] + {9'h0, count_6}, 1'h0};
    codeStart_8 = _GEN_4 ? 16'h0 : {codeStart_7[14:0] + {9'h0, count_7}, 1'h0};
    codeStart_9 = _GEN_4 ? 16'h0 : {codeStart_8[14:0] + {9'h0, count_8}, 1'h0};
    codeStart_10 = _GEN_4 ? 16'h0 : {codeStart_9[14:0] + {9'h0, count_9}, 1'h0};
    codeStart_11 = _GEN_4 ? 16'h0 : {codeStart_10[14:0] + {9'h0, count_10}, 1'h0};
    codeStart_12 = _GEN_4 ? 16'h0 : {codeStart_11[14:0] + {9'h0, count_11}, 1'h0};
    codeStart_13 = _GEN_4 ? 16'h0 : {codeStart_12[14:0] + {9'h0, count_12}, 1'h0};
    codeStart_14 = _GEN_4 ? 16'h0 : {codeStart_13[14:0] + {9'h0, count_13}, 1'h0};
    codeStart_15 = _GEN_4 ? 16'h0 : {codeStart_14[14:0] + {9'h0, count_14}, 1'h0};
    if (_GEN | ~_GEN_0) begin
    end
    else begin
      filtered_0 <= io_freq_in_0;
      filtered_1 <= io_freq_in_1;
      filtered_2 <= io_freq_in_2;
      filtered_3 <= io_freq_in_3;
      filtered_4 <= io_freq_in_4;
      filtered_5 <= io_freq_in_5;
      filtered_6 <= io_freq_in_6;
      filtered_7 <= io_freq_in_7;
    end
    if (~(_GEN | _GEN_0)) begin
      if (_GEN_1) begin
        if (_builder_io_done) begin
          depthsIn_0 <= {2'h0, _builder_io_depths_0};
          depthsIn_1 <= {2'h0, _builder_io_depths_1};
          depthsIn_2 <= {2'h0, _builder_io_depths_2};
          depthsIn_3 <= {2'h0, _builder_io_depths_3};
          depthsIn_4 <= {2'h0, _builder_io_depths_4};
          depthsIn_5 <= {2'h0, _builder_io_depths_5};
          depthsIn_6 <= {2'h0, _builder_io_depths_6};
          depthsIn_7 <= {2'h0, _builder_io_depths_7};
        end
      end
      else if (_GEN_2 & _adjust_io_done) begin
        depthsIn_0 <= _adjust_io_depths_out_0;
        depthsIn_1 <= _adjust_io_depths_out_1;
        depthsIn_2 <= _adjust_io_depths_out_2;
        depthsIn_3 <= _adjust_io_depths_out_3;
        depthsIn_4 <= _adjust_io_depths_out_4;
        depthsIn_5 <= _adjust_io_depths_out_5;
        depthsIn_6 <= _adjust_io_depths_out_6;
        depthsIn_7 <= _adjust_io_depths_out_7;
      end
    end
    depthsInReg_0 <= depthsIn_0;
    depthsInReg_1 <= depthsIn_1;
    depthsInReg_2 <= depthsIn_2;
    depthsInReg_3 <= depthsIn_3;
    depthsInReg_4 <= depthsIn_4;
    depthsInReg_5 <= depthsIn_5;
    depthsInReg_6 <= depthsIn_6;
    depthsInReg_7 <= depthsIn_7;
    if (_GEN | _GEN_0 | _GEN_1 | _GEN_2 | _GEN_3 | state != 3'h5) begin
    end
    else begin
      automatic logic [13:0][15:0] _GEN_5 =
        '{16'h0,
          16'h0,
          16'h0,
          16'h0,
          16'h0,
          16'h0,
          16'h0,
          16'h0,
          16'h0,
          16'h0,
          16'h0,
          16'h0,
          16'h0,
          16'h0};
      automatic logic [14:0][15:0] _GEN_6 =
        '{16'h0,
          16'h0,
          16'h0,
          16'h0,
          16'h0,
          16'h0,
          16'h0,
          16'h0,
          16'h0,
          16'h0,
          16'h0,
          16'h0,
          16'h0,
          16'h0,
          16'h0};
      automatic logic [15:0]       _prefixSum_2_T =
        {10'h0, countReg_0} + {10'h0, countReg_1};
      automatic logic [15:0]       _prefixSum_3_T = _prefixSum_2_T + {10'h0, countReg_2};
      automatic logic [15:0]       _prefixSum_4_T = _prefixSum_3_T + {10'h0, countReg_3};
      automatic logic [15:0]       _prefixSum_5_T = _prefixSum_4_T + {10'h0, countReg_4};
      automatic logic [15:0]       _prefixSum_6_T = _prefixSum_5_T + {10'h0, countReg_5};
      automatic logic [15:0]       _prefixSum_7_T = _prefixSum_6_T + {10'h0, countReg_6};
      automatic logic [15:0]       _prefixSum_8_T = _prefixSum_7_T + {10'h0, countReg_7};
      automatic logic [15:0]       _prefixSum_9_T = _prefixSum_8_T + {10'h0, countReg_8};
      automatic logic [15:0]       _prefixSum_10_T = _prefixSum_9_T + {10'h0, countReg_9};
      automatic logic [15:0]       _prefixSum_11_T =
        _prefixSum_10_T + {10'h0, countReg_10};
      automatic logic [15:0]       _prefixSum_12_T =
        _prefixSum_11_T + {10'h0, countReg_11};
      automatic logic [15:0]       _prefixSum_13_T =
        _prefixSum_12_T + {10'h0, countReg_12};
      automatic logic [15:0]       _prefixSum_14_T =
        _prefixSum_13_T + {10'h0, countReg_13};
      automatic logic [15:0]       _prefixSum_15_T =
        _prefixSum_14_T + {10'h0, countReg_14};
      automatic logic [15:0]       _prefixSum_16_T =
        _prefixSum_15_T + {10'h0, countReg_15};
      automatic logic [31:0][15:0] _GEN_7 =
        {_GEN_6,
         {{codeStartReg_16},
          {codeStartReg_15},
          {codeStartReg_14},
          {codeStartReg_13},
          {codeStartReg_12},
          {codeStartReg_11},
          {codeStartReg_10},
          {codeStartReg_9},
          {codeStartReg_8},
          {codeStartReg_7},
          {codeStartReg_6},
          {codeStartReg_5},
          {codeStartReg_4},
          {codeStartReg_3},
          {codeStartReg_2},
          {codeStartReg_1},
          {16'h0}}};
      automatic logic [31:0][15:0] _GEN_8 =
        {_GEN_5,
         {{_prefixSum_16_T + {10'h0, countReg_16}},
          {_prefixSum_16_T},
          {_prefixSum_15_T},
          {_prefixSum_14_T},
          {_prefixSum_13_T},
          {_prefixSum_12_T},
          {_prefixSum_11_T},
          {_prefixSum_10_T},
          {_prefixSum_9_T},
          {_prefixSum_8_T},
          {_prefixSum_7_T},
          {_prefixSum_6_T},
          {_prefixSum_5_T},
          {_prefixSum_4_T},
          {_prefixSum_3_T},
          {_prefixSum_2_T},
          {{10'h0, countReg_0}},
          {16'h0}}};
      codes_0 <= _GEN_7[depthsInReg_0[4:0]] + _GEN_8[depthsInReg_0[4:0]];
      codes_1 <= _GEN_7[depthsInReg_1[4:0]] + _GEN_8[depthsInReg_1[4:0]];
      codes_2 <= _GEN_7[depthsInReg_2[4:0]] + _GEN_8[depthsInReg_2[4:0]];
      codes_3 <= _GEN_7[depthsInReg_3[4:0]] + _GEN_8[depthsInReg_3[4:0]];
      codes_4 <= _GEN_7[depthsInReg_4[4:0]] + _GEN_8[depthsInReg_4[4:0]];
      codes_5 <= _GEN_7[depthsInReg_5[4:0]] + _GEN_8[depthsInReg_5[4:0]];
      codes_6 <= _GEN_7[depthsInReg_6[4:0]] + _GEN_8[depthsInReg_6[4:0]];
      codes_7 <= _GEN_7[depthsInReg_7[4:0]] + _GEN_8[depthsInReg_7[4:0]];
      lengths_0 <= depthsInReg_0;
      lengths_1 <= depthsInReg_1;
      lengths_2 <= depthsInReg_2;
      lengths_3 <= depthsInReg_3;
      lengths_4 <= depthsInReg_4;
      lengths_5 <= depthsInReg_5;
      lengths_6 <= depthsInReg_6;
      lengths_7 <= depthsInReg_7;
    end
    countReg_0 <= count_0;
    countReg_1 <= count_1;
    countReg_2 <= count_2;
    countReg_3 <= count_3;
    countReg_4 <= count_4;
    countReg_5 <= count_5;
    countReg_6 <= count_6;
    countReg_7 <= count_7;
    countReg_8 <= count_8;
    countReg_9 <= count_9;
    countReg_10 <= count_10;
    countReg_11 <= count_11;
    countReg_12 <= count_12;
    countReg_13 <= count_13;
    countReg_14 <= count_14;
    countReg_15 <= count_15;
    countReg_16 <=
      _GEN_4
        ? 6'h0
        : {1'h0,
           {1'h0,
            {1'h0,
             {1'h0, {1'h0, depthsInReg_0 == 6'h10} + {1'h0, depthsInReg_1 == 6'h10}}
               + {2'h0, depthsInReg_2 == 6'h10}} + {3'h0, depthsInReg_3 == 6'h10}}
             + {4'h0, depthsInReg_4 == 6'h10}} + {5'h0, depthsInReg_5 == 6'h10}
          + {5'h0, depthsInReg_6 == 6'h10} + {5'h0, depthsInReg_7 == 6'h10};
    codeStartReg_1 <= codeStart_1;
    codeStartReg_2 <= codeStart_2;
    codeStartReg_3 <= codeStart_3;
    codeStartReg_4 <= codeStart_4;
    codeStartReg_5 <= codeStart_5;
    codeStartReg_6 <= codeStart_6;
    codeStartReg_7 <= codeStart_7;
    codeStartReg_8 <= codeStart_8;
    codeStartReg_9 <= codeStart_9;
    codeStartReg_10 <= codeStart_10;
    codeStartReg_11 <= codeStart_11;
    codeStartReg_12 <= codeStart_12;
    codeStartReg_13 <= codeStart_13;
    codeStartReg_14 <= codeStart_14;
    codeStartReg_15 <= codeStart_15;
    codeStartReg_16 <= _GEN_4 ? 16'h0 : {codeStart_15[14:0] + {9'h0, count_15}, 1'h0};
    if (reset)
      state <= 3'h0;
    else if (io_flush)
      state <= 3'h0;
    else begin
      automatic logic [7:0][2:0] _GEN_9 =
        {{state},
         {3'h0},
         {3'h6},
         {3'h5},
         {_adjust_io_done ? 3'h4 : state},
         {_builder_io_done ? 3'h3 : state},
         {3'h2},
         {state}};
      state <= _GEN_9[state];
    end
  end // always @(posedge)
  HuffmanTreeBuilder builder (
    .clock       (clock),
    .reset       (reset),
    .io_freqs_0  (filtered_0),
    .io_freqs_1  (filtered_1),
    .io_freqs_2  (filtered_2),
    .io_freqs_3  (filtered_3),
    .io_freqs_4  (filtered_4),
    .io_freqs_5  (filtered_5),
    .io_freqs_6  (filtered_6),
    .io_freqs_7  (filtered_7),
    .io_done     (_builder_io_done),
    .io_depths_0 (_builder_io_depths_0),
    .io_depths_1 (_builder_io_depths_1),
    .io_depths_2 (_builder_io_depths_2),
    .io_depths_3 (_builder_io_depths_3),
    .io_depths_4 (_builder_io_depths_4),
    .io_depths_5 (_builder_io_depths_5),
    .io_depths_6 (_builder_io_depths_6),
    .io_depths_7 (_builder_io_depths_7)
  );
  tree_adjust adjust (
    .clock           (clock),
    .reset           (reset),
    .io_depths_in_0  (depthsIn_0),
    .io_depths_in_1  (depthsIn_1),
    .io_depths_in_2  (depthsIn_2),
    .io_depths_in_3  (depthsIn_3),
    .io_depths_in_4  (depthsIn_4),
    .io_depths_in_5  (depthsIn_5),
    .io_depths_in_6  (depthsIn_6),
    .io_depths_in_7  (depthsIn_7),
    .io_depths_out_0 (_adjust_io_depths_out_0),
    .io_depths_out_1 (_adjust_io_depths_out_1),
    .io_depths_out_2 (_adjust_io_depths_out_2),
    .io_depths_out_3 (_adjust_io_depths_out_3),
    .io_depths_out_4 (_adjust_io_depths_out_4),
    .io_depths_out_5 (_adjust_io_depths_out_5),
    .io_depths_out_6 (_adjust_io_depths_out_6),
    .io_depths_out_7 (_adjust_io_depths_out_7),
    .io_done         (_adjust_io_done)
  );
  assign io_done = state == 3'h6;
  assign io_code_out_0 = codes_0;
  assign io_code_out_1 = codes_1;
  assign io_code_out_2 = codes_2;
  assign io_code_out_3 = codes_3;
  assign io_code_out_4 = codes_4;
  assign io_code_out_5 = codes_5;
  assign io_code_out_6 = codes_6;
  assign io_code_out_7 = codes_7;
  assign io_length_out_0 = lengths_0;
  assign io_length_out_1 = lengths_1;
  assign io_length_out_2 = lengths_2;
  assign io_length_out_3 = lengths_3;
  assign io_length_out_4 = lengths_4;
  assign io_length_out_5 = lengths_5;
  assign io_length_out_6 = lengths_6;
  assign io_length_out_7 = lengths_7;
endmodule

module EntropyAwareHuffmanSystem(
  input          clock,
                 reset,
  output         io_data_in_ready,
  input          io_data_in_valid,
  input  [255:0] io_data_in_bits,
  input          io_encoded_out_ready,
  output         io_encoded_out_valid,
  output [15:0]  io_encoded_out_bits_code,
  output [4:0]   io_encoded_out_bits_length,
  output         io_encoded_out_bits_compression_mode,
  input          io_start,
  output         io_done,
  input          io_flush
);

  wire        _treeBuilder_io_done;
  wire        _entropyCalc_io_compression_mode;
  wire        _entropyCalc_io_done;
  wire [31:0] _symbolSort_io_sorted_out_0;
  wire [31:0] _symbolSort_io_sorted_out_1;
  wire [31:0] _symbolSort_io_sorted_out_2;
  wire [31:0] _symbolSort_io_sorted_out_3;
  wire [31:0] _symbolSort_io_sorted_out_4;
  wire [31:0] _symbolSort_io_sorted_out_5;
  wire [31:0] _symbolSort_io_sorted_out_6;
  wire [31:0] _symbolSort_io_sorted_out_7;
  wire        _symbolSort_io_done;
  wire [31:0] _symbolStat_io_freq_out_bits_0;
  wire [31:0] _symbolStat_io_freq_out_bits_1;
  wire [31:0] _symbolStat_io_freq_out_bits_2;
  wire [31:0] _symbolStat_io_freq_out_bits_3;
  wire [31:0] _symbolStat_io_freq_out_bits_4;
  wire [31:0] _symbolStat_io_freq_out_bits_5;
  wire [31:0] _symbolStat_io_freq_out_bits_6;
  wire [31:0] _symbolStat_io_freq_out_bits_7;
  reg         pipeValid_0;
  reg         pipeValid_1;
  reg         pipeValid_2;
  reg         pipeValid_3;
  reg         pipeReady_0;
  reg  [31:0] freqReg1_0;
  reg  [31:0] freqReg1_1;
  reg  [31:0] freqReg1_2;
  reg  [31:0] freqReg1_3;
  reg  [31:0] freqReg1_4;
  reg  [31:0] freqReg1_5;
  reg  [31:0] freqReg1_6;
  reg  [31:0] freqReg1_7;
  reg  [31:0] freqReg2_0;
  reg  [31:0] freqReg2_1;
  reg  [31:0] freqReg2_2;
  reg  [31:0] freqReg2_3;
  reg  [31:0] freqReg2_4;
  reg  [31:0] freqReg2_5;
  reg  [31:0] freqReg2_6;
  reg  [31:0] freqReg2_7;
  reg  [1:0]  modeReg3;
  reg  [15:0] codeReg4_0;
  reg  [15:0] codeReg4_1;
  reg  [15:0] codeReg4_2;
  reg  [15:0] codeReg4_3;
  reg  [15:0] codeReg4_4;
  reg  [15:0] codeReg4_5;
  reg  [15:0] codeReg4_6;
  reg  [15:0] codeReg4_7;
  reg  [4:0]  lenReg4_0;
  reg  [4:0]  lenReg4_1;
  reg  [4:0]  lenReg4_2;
  reg  [4:0]  lenReg4_3;
  reg  [4:0]  lenReg4_4;
  reg  [4:0]  lenReg4_5;
  reg  [4:0]  lenReg4_6;
  reg  [4:0]  lenReg4_7;
  reg         encodedValid;
  reg  [15:0] encodedCode;
  reg  [4:0]  encodedLen;
  reg         encodedMode;
  always @(posedge clock) begin
    automatic logic _GEN;
    _GEN = ~pipeValid_3 | (|modeReg3);
    if (reset) begin
      pipeValid_0 <= 1'h0;
      pipeValid_1 <= 1'h0;
      pipeValid_2 <= 1'h0;
      pipeValid_3 <= 1'h0;
      pipeReady_0 <= 1'h0;
      encodedValid <= 1'h0;
    end
    else begin
      pipeValid_0 <= 1'h0;
      pipeValid_1 <= ~io_flush & (pipeReady_0 | _symbolSort_io_done);
      pipeValid_2 <= ~io_flush & _entropyCalc_io_done;
      pipeValid_3 <= ~io_flush & _GEN & _treeBuilder_io_done;
      pipeReady_0 <= io_start & io_data_in_valid;
      encodedValid <= ~io_flush & encodedValid & ~io_encoded_out_ready;
    end
    freqReg1_0 <= _symbolStat_io_freq_out_bits_0;
    freqReg1_1 <= _symbolStat_io_freq_out_bits_1;
    freqReg1_2 <= _symbolStat_io_freq_out_bits_2;
    freqReg1_3 <= _symbolStat_io_freq_out_bits_3;
    freqReg1_4 <= _symbolStat_io_freq_out_bits_4;
    freqReg1_5 <= _symbolStat_io_freq_out_bits_5;
    freqReg1_6 <= _symbolStat_io_freq_out_bits_6;
    freqReg1_7 <= _symbolStat_io_freq_out_bits_7;
    freqReg2_0 <= _symbolSort_io_sorted_out_0;
    freqReg2_1 <= _symbolSort_io_sorted_out_1;
    freqReg2_2 <= _symbolSort_io_sorted_out_2;
    freqReg2_3 <= _symbolSort_io_sorted_out_3;
    freqReg2_4 <= _symbolSort_io_sorted_out_4;
    freqReg2_5 <= _symbolSort_io_sorted_out_5;
    freqReg2_6 <= _symbolSort_io_sorted_out_6;
    freqReg2_7 <= _symbolSort_io_sorted_out_7;
    modeReg3 <= {1'h0, _entropyCalc_io_compression_mode};
    if (_GEN) begin
    end
    else begin
      codeReg4_0 <= 16'h0;
      codeReg4_1 <= 16'h1;
      codeReg4_2 <= 16'h2;
      codeReg4_3 <= 16'h3;
      codeReg4_4 <= 16'h4;
      codeReg4_5 <= 16'h5;
      codeReg4_6 <= 16'h6;
      codeReg4_7 <= 16'h7;
      lenReg4_0 <= 5'h0;
      lenReg4_1 <= 5'h0;
      lenReg4_2 <= 5'h0;
      lenReg4_3 <= 5'h0;
      lenReg4_4 <= 5'h0;
      lenReg4_5 <= 5'h0;
      lenReg4_6 <= 5'h0;
      lenReg4_7 <= 5'h0;
    end
    if (io_data_in_valid & ~io_flush) begin
      automatic logic             _GEN_0 = modeReg3 == 2'h0;
      automatic logic [7:0][15:0] _GEN_1 =
        {{codeReg4_7},
         {codeReg4_6},
         {codeReg4_5},
         {codeReg4_4},
         {codeReg4_3},
         {codeReg4_2},
         {codeReg4_1},
         {codeReg4_0}};
      automatic logic [7:0][4:0]  _GEN_2 =
        {{lenReg4_7},
         {lenReg4_6},
         {lenReg4_5},
         {lenReg4_4},
         {lenReg4_3},
         {lenReg4_2},
         {lenReg4_1},
         {lenReg4_0}};
      encodedCode <= _GEN_0 ? io_data_in_bits[15:0] : _GEN_1[io_data_in_bits[2:0]];
      encodedLen <= _GEN_0 ? 5'h0 : _GEN_2[io_data_in_bits[2:0]];
      encodedMode <= ~_GEN_0 & modeReg3[0];
    end
  end // always @(posedge)
  SymbolStat symbolStat (
    .clock              (clock),
    .reset              (reset),
    .io_data_in_valid   (io_data_in_valid),
    .io_data_in_bits    (io_data_in_bits),
    .io_freq_out_bits_0 (_symbolStat_io_freq_out_bits_0),
    .io_freq_out_bits_1 (_symbolStat_io_freq_out_bits_1),
    .io_freq_out_bits_2 (_symbolStat_io_freq_out_bits_2),
    .io_freq_out_bits_3 (_symbolStat_io_freq_out_bits_3),
    .io_freq_out_bits_4 (_symbolStat_io_freq_out_bits_4),
    .io_freq_out_bits_5 (_symbolStat_io_freq_out_bits_5),
    .io_freq_out_bits_6 (_symbolStat_io_freq_out_bits_6),
    .io_freq_out_bits_7 (_symbolStat_io_freq_out_bits_7),
    .io_start           (pipeReady_0),
    .io_flush           (io_flush)
  );
  SymbolSort symbolSort (
    .clock             (clock),
    .reset             (reset),
    .io_freq_in_bits_0 (freqReg1_0),
    .io_freq_in_bits_1 (freqReg1_1),
    .io_freq_in_bits_2 (freqReg1_2),
    .io_freq_in_bits_3 (freqReg1_3),
    .io_freq_in_bits_4 (freqReg1_4),
    .io_freq_in_bits_5 (freqReg1_5),
    .io_freq_in_bits_6 (freqReg1_6),
    .io_freq_in_bits_7 (freqReg1_7),
    .io_sorted_out_0   (_symbolSort_io_sorted_out_0),
    .io_sorted_out_1   (_symbolSort_io_sorted_out_1),
    .io_sorted_out_2   (_symbolSort_io_sorted_out_2),
    .io_sorted_out_3   (_symbolSort_io_sorted_out_3),
    .io_sorted_out_4   (_symbolSort_io_sorted_out_4),
    .io_sorted_out_5   (_symbolSort_io_sorted_out_5),
    .io_sorted_out_6   (_symbolSort_io_sorted_out_6),
    .io_sorted_out_7   (_symbolSort_io_sorted_out_7),
    .io_done           (_symbolSort_io_done),
    .io_flush          (io_flush)
  );
  ShannonEntropy entropyCalc (
    .clock               (clock),
    .reset               (reset),
    .io_freq_in_0        (freqReg2_0),
    .io_freq_in_1        (freqReg2_1),
    .io_freq_in_2        (freqReg2_2),
    .io_freq_in_3        (freqReg2_3),
    .io_freq_in_4        (freqReg2_4),
    .io_freq_in_5        (freqReg2_5),
    .io_freq_in_6        (freqReg2_6),
    .io_freq_in_7        (freqReg2_7),
    .io_compression_mode (_entropyCalc_io_compression_mode),
    .io_done             (_entropyCalc_io_done),
    .io_flush            (io_flush)
  );
  EntropyAwareTreeBuilder treeBuilder (
    .clock           (clock),
    .reset           (reset),
    .io_freq_in_0    (freqReg2_0),
    .io_freq_in_1    (freqReg2_1),
    .io_freq_in_2    (freqReg2_2),
    .io_freq_in_3    (freqReg2_3),
    .io_freq_in_4    (freqReg2_4),
    .io_freq_in_5    (freqReg2_5),
    .io_freq_in_6    (freqReg2_6),
    .io_freq_in_7    (freqReg2_7),
    .io_flush        (io_flush),
    .io_done         (_treeBuilder_io_done),
    .io_code_out_0   (/* unused */),
    .io_code_out_1   (/* unused */),
    .io_code_out_2   (/* unused */),
    .io_code_out_3   (/* unused */),
    .io_code_out_4   (/* unused */),
    .io_code_out_5   (/* unused */),
    .io_code_out_6   (/* unused */),
    .io_code_out_7   (/* unused */),
    .io_length_out_0 (/* unused */),
    .io_length_out_1 (/* unused */),
    .io_length_out_2 (/* unused */),
    .io_length_out_3 (/* unused */),
    .io_length_out_4 (/* unused */),
    .io_length_out_5 (/* unused */),
    .io_length_out_6 (/* unused */),
    .io_length_out_7 (/* unused */)
  );
  assign io_data_in_ready = pipeValid_0 & io_encoded_out_ready;
  assign io_encoded_out_valid = encodedValid;
  assign io_encoded_out_bits_code = encodedCode;
  assign io_encoded_out_bits_length = encodedLen;
  assign io_encoded_out_bits_compression_mode = encodedMode;
  assign io_done = {pipeValid_3, pipeValid_2, pipeValid_1, pipeValid_0} == 4'h0;
endmodule

